<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[strugee.net blog - 'musings' category]]></title><description><![CDATA[strugee.net blog - 'musings' category]]></description><link>https://strugee.net/blog/category/musings</link><generator>stratic-indexes-to-rss</generator><lastBuildDate>Sun, 21 Apr 2019 03:25:06 GMT</lastBuildDate><atom:link href="https://strugee.net/blog/category/musings/index.rss" rel="self" type="application/rss+xml"/><copyright><![CDATA[Â© Copyright 2012-2018 AJ Jordan. Available under the GNU Affero GPL.]]></copyright><webMaster><![CDATA[AJ Jordan <alex@strugee.net>]]></webMaster><item><title><![CDATA[Shell script is one of the purest forms of human expression]]></title><description><![CDATA[<p>While I was at the <a href="https://www.recurse.com/">Recurse Center</a>, I came up with an interesting theory, and today I thought I'd finally formally write about it on my blog. Here it is: shell script is one of the purest forms of human expression, at least as far as technology is concerned.</p>
<p>Why? Well, shell script is this weird mix of actual programming language things and macro expansions, and even the programming things tend to be... odd, to put it politely. As a trivial example, did you know that this:</p>
<pre><code>$ echo {1..10}
</code></pre>
<p>results in this output:</p>
<pre><code>1 2 3 4 5 6 7 8 9 10
</code></pre>
<p>Shell scripts[1] know how to expand number sequences; it's just built-in to them. Variables work with substitution too, and you can even build commands with them:</p>
<pre><code>PAGER=less
$PAGER longfile.txt
</code></pre>
<p>The key thing to note here is that the second line is replacing <code>$PAGER</code> with the literal text <code>less</code>, and then running the resulting command line. The "variable access" is basically just an inline macro expansion, and the shell doesn't really handle it very intelligently. (This is also why you often need to quote variables when you access them - if they have whitespace in them, the shell will interpret the variable as more than one word.)</p>
<p>Or take the type system of the shell: it has none[2]. For example, what does <code>0</code> mean? It could represent any one of these things:</p>
<ol>
<li>The number 0</li>
<li>The string "0"</li>
<li>A binary we're invoking (well, trying to invoke) called <code>0</code></li>
<li>An argument to a binary</li>
<li>File descriptor 0 (stdin)</li>
<li>A file named <code>0</code></li>
</ol>
<p>All of these things combine to make the shell incredibly flexible and powerful - you can often express a <em>lot</em> in shell script with very little characters by writing "macros" in the right way.</p>
<p>It's also what makes shell such a god-awful programming language.</p>
<p>Think about it - as programmers, much of what we do seeks to impose order on our systems. We lint our code and run it through style checkers. I personally like to turn up my linter settings to maximum. And we use the concept of types to help organize our code - sure, there's disagreement on how <em>much</em> order types should impose, but we all pretty much agree that there should be <em>some</em> concept of types and type safety. Hell, for the languages whose type systems are basically "wtf are types", we make tools to impose additional safety on top of that - take <a href="http://www.typescriptlang.org/">TypeScript</a> and <a href="https://flow.org/">Flow</a>, for example. We also love to (hate to) write tests to ensure that our code fulfills some interface or behavior contract. (Even the idea of an interface seeks to organize and compartmentalize complexity in the system.)</p>
<p>Humans are inherently messy. We're scatterbrained and easily distracted, and our thoughts (or at least, my thoughts) tend to jump all over the place. Shell script is an amazing way to express your ideas because it lets you get directly to the goal so quickly, in a way that matches that messiness that defines us as a species. But since so much of our work as programmers is about trying to counteract our messiness, shell script is a <em>terrible</em> way to write real programs, for the exact. Same. Reason.</p>
<p>Footnotes:</p>
<p> [1]: Those written in <code>bash</code>, at least.</p>
<p> [2]: Note that this is different from having a type system of "wtf are types?? <a href="https://www.destroyallsoftware.com/talks/wat">wat</a>" - JavaScript is a good example of a language with such a type system, as is (to my understanding) PHP. The shell, on the other hand, has no type system <em>at all</em>.</p>
]]></description><link>https://strugee.net/blog/2017/12/shell-script-is-one-of-the-purest-forms-of-human-expression</link><guid isPermaLink="true">https://strugee.net/blog/2017/12/shell-script-is-one-of-the-purest-forms-of-human-expression</guid><category><![CDATA[musings]]></category><category><![CDATA[blaggregator]]></category><pubDate>Thu, 28 Dec 2017 00:08:20 GMT</pubDate></item><item><title><![CDATA[Graduation 2017: reflections on 365 days of gap yearing]]></title><description><![CDATA[<p>Tonight marks the end of the high school careers for everyone in Seattle Academy's Class of 2017. Congratulations to everyone who graduated tonight - you deserve it, seriously. To my friends in particular, I'm so proud of you guys! You're completely amazing, you've done such incredible things and I love you very much.</p>
<p>Attending the Class of 2017's graduation was <em>super</em> strange for me too, honestly, because I'm such a radically different person than back when I was on that stage.</p>
<p>This year I put out <a href="https://strugee.net/blog/2016/08/pump.io-1.0.0-is-now-available">several</a> <a href="https://strugee.net/blog/2016/11/pump.io-2.0.1-is-available">major</a> <a href="https://strugee.net/blog/2017/04/pump.io-4.0-in-beta">releases</a> (and a couple minor ones too) of <a href="http://pump.io">pump.io</a>, the decentralized social networking software I maintain; I <a href="https://strugee.net/blog/2017/05/pump.io-accident">became an Invited Expert</a> at the World Wide Web Consortium and I wrote the software that powers this blog - <a href="https://github.com/straticjs">Stratic</a> - from scratch. I spoke at some major technical conferences on <a href="https://media.libreplanet.org/u/libreplanet/m/pump-io-the-federated-extensible-social-network/">pump.io</a> and <a href="https://www.youtube.com/watch?v=a9l-FmSgyt8">Stratic</a>, too. But mostly what I was thinking about tonight was all the personal development I went through. As some who are close to me in real life know (particularly those who were there), a year ago I was relatively seriously depressed. There were actually a <em>lot</em> of reasons for this, but one of the most important was the trouble I had dealing with change - the biggest change, of course, being leaving high school: somewhere familiar, somewhere with friends.</p>
<p>I vividly remember sitting in the seats just under the stage in McCaw Hall the day of graduation as the SAAS people running the show showed us where to walk and what to do. I leaned over to my friend and said, "I don't think I'll understand what's happening here for a very long time," to which she said, "what, like where we walk and stuff?" I chuckled and said nevermind, because what I was really referring to was what was happening in a grander sense - what this event really meant and was for, on the scale of years and decades (I couldn't find words for this at the time).</p>
<p>I don't really know what it felt like to walk out on stage for other people (both this year and last year) but for me, it seemed almost trivial, like a non-event. It didn't feel nearly as momentous as it seemed like it should. Based on my description my therapist would later refer to it as a foregone conclusion, a description that stuck with me given how accurately it seemed to verbalize what I was feeling. It just didn't feel big, but I <em>knew</em> that it <em>was</em>. In the grand sense, I just really didn't understand what was happening.</p>
<p>Tonight, watching the Class of 2017, I think I started to get it. The crux of my personal development was being at the <a href="https://recurse.com">Recurse Center</a>. In fact, applying to and attending the Recurse Center was without a shadow of a doubt the highlight of not just my year but my entire <em>life</em>. I love my friends and teachers at SAAS very deeply, and I still think going to SAAS was a great choice. But at the Recurse Center, I felt at home, like I belonged, in a way I just never felt in high school. Plus, it felt pretty great to live on my own in New York City, feeling like I knew my way around the subway system[1], how to get food for myself (whether at the supermarket to cook or from nearby restaurants), and just what it <em>felt</em> like to live in such an amazing place.</p>
<p>There was a moment in senior year, in Jason's English class, when I was thinking about my then-sophomore friends and wondering if I'd see them in ten or even twenty years. After all, they'd probably have separate class reunions. And right as I started to wonder what we'd all even <em>be</em> like then, it hit me that the idea of "growing up" is bullshit. No one is ever truly "grown up"; people just slide along a scale from toddler to wise elder. Every human always will be and always has been a work in progress - always growing, always changing. I am incredibly proud of all the technical work I did this year. I am unbelievably grateful and happy to have made so many amazing friends at the Recurse Center, and I feel very lucky to have such good mental health - mentally I'm probably in the best place I've ever been in my whole life. But even with all that, I know I'm still young. I still have lots of room to grow and there are more exciting opportunities ahead of me than ever.</p>
<p>When everyone's in the middle of something, I think they get lost in the moment. In my senior year, my whole life was structured around being in senior year; at the Recurse Center, my whole life revolved around the Recurse Center. Essentially, I'm describing the act of putting your head down and concentrating on something. So maybe what graduation (and important events like it) is really about is a chance to suspend time; to not be lost in the moment. A chance to, just for a second, not have your life revolve around anything in particular and instead, look at yourself and the way you've changed and continue to change over your lifetime. Like a character arc. It really is amazing, and in a way, isn't that implicitly what graduation's saying anyway? Graduation is an event designed to celebrate everything that the people on stage have accomplished - and in order to celebrate something, you have to sit back and look at it.</p>
<p>It was honestly <em>wild</em> to watch the people on stage talk about each other and their lives for the past four years, recalling both the time when I felt the <em>exact same way</em> they do now as well as just how much I, and my perspective, have changed. To the Class of 2017, as someone who was in your shoes a year ago - I know I sound stupid and clichÃ©d, but your world is about to become so much bigger than you can imagine. SAAS, which once seemed like such a monumental, immovable part of your life, will instead become small (though still important). At least, that's what happened to me. I hope it does for you, too. And I'm really excited for you guys.</p>
<p>Congratulations once again. You guys freaking did it.</p>
<p>Footnotes:</p>
<p> [1]: the operative word being "feeling", because I almost certainly didn't know my way around <em>nearly</em> as well as I felt I did</p>
]]></description><link>https://strugee.net/blog/2017/06/graduation-2017-reflections-on-365-days-of-gap-yearing</link><guid isPermaLink="true">https://strugee.net/blog/2017/06/graduation-2017-reflections-on-365-days-of-gap-yearing</guid><category><![CDATA[personal]]></category><category><![CDATA[musings]]></category><category><![CDATA[blaggregator]]></category><pubDate>Wed, 07 Jun 2017 00:46:29 GMT</pubDate></item><item><title><![CDATA[Gender representation at RC]]></title><description><![CDATA[<p>So I want to talk (real quick) about gender representation in tech. Specifically, the fact that it's abysmal. Women[1] usually account for, at most, <a href="https://www.cnet.com/news/women-in-tech-the-numbers-dont-add-up/">30% of the employees in a company</a> and that number is often much lower. Even at the companies where it's 30%, that number is misleading because it doesn't adress management positions which are often much lower. (For reference, women accounted for about 59% of the overall workforce as of 2015, when the article I pulled those numbers from was published.) <a href="http://fortune.com/2014/10/02/women-leave-tech-culture/">Here's an article</a> that says that on average, women leave the industry within 7 years of being in it. Let me repeat that, because I didn't say they leave their jobs, or take a break. They completely leave the <em>entire technology industry</em>. And unfortunately it makes sense, since incidents of sexism in tech are <a href="http://geekfeminism.wikia.com/wiki/Category:Incidents">rampant</a>.</p>
<p>Unlike (most of) the rest of the tech world, the <a href="https://recurse.com">Recurse Center</a> is mostly (completely?) gender-balanced. I want to point out that while for years I've believed in diversity, it didn't become clear to me how much <a href="https://www.opensocietyfoundations.org/voices/implicit-bias-and-social-justice">implicit bias</a> I held until I joined RC. I find that, having previously spent significant amounts of time in environments that were predominantly white, cis and male, <strong>I find myself needing to self-correct discriminatory and gender-based unconscious assumptions significantly less frequently at RC</strong>. In other words, my subconscious is making less incorrect, gender-based suggestions about what people are like that I then have to consciously reject. I would attribute this almost 100% to the fact that at RC I'm surrounded by lots of people who are a) super talented and know their shit and b) aren't male.</p>
<p>If I have a point to this blog post (and I'm not sure that I do), it'd be to underscore what many have said before me: representation and role models are important. Advocating for gender equality is good and important, but in the end what really matters is what's actually in people's heads. That's mostly influenced by what they see in their immediate lives, and that's why representation is so important - believing in equality is great, but presenting actual evidence to your subconscious that its biases are incorrect is a much more powerful way to improve the way you perceive the world.</p>
<p>If folks have any comments or different perspectives, I'd love to hear them <a href="https://strugee.net/contact">privately</a> or via <a href="https://webmention.net/">WebMention</a>.</p>
<p> [1]: I'm focusing on women here because I'm not aware of any statistics about non-binary people in tech. But it's worth noting that it's a huge problem for them, too.</p>
<p><strong>Update February 22nd:</strong> the lovely <a href="https://twitter.com/rhonorv">Rachel Vincent</a> from RC faculty says this about RC's gender-balancing:</p>
<blockquote>
<p>Of the folks who are currently in-batch (Winter 2's and Spring 1's), ~36% identify as women. It's roughly the same for the community as a whole (~33%), though we don't have super accurate numbers because we don't update information on folks' gender. The most gender balanced batches were a little over 40% women. We're always pushing for 50/50, though. ð Our overall strategy is to try to get an applicant pool that is as gender balanced as possible, and we don't do any kind of balancing during the admissions process itself.</p>
</blockquote>
]]></description><link>https://strugee.net/blog/2017/02/gender-representation-at-rc</link><guid isPermaLink="true">https://strugee.net/blog/2017/02/gender-representation-at-rc</guid><category><![CDATA[personal]]></category><category><![CDATA[musings]]></category><category><![CDATA[culture]]></category><category><![CDATA[blaggregator]]></category><pubDate>Tue, 14 Feb 2017 17:01:19 GMT</pubDate></item><item><title><![CDATA[Surveillance priorities]]></title><description><![CDATA[<p>For several years now I've been really interested in technology policy - things like security, privacy and censorship, and especially how those things relate to both mass surveillance and freedom-respecting software. That's why I follow organizations like Fight for the Future and the EFF, and why I e.g. participated in the movement to stop SOPA and PIPA, the internet censorship bills.</p>
<p>But a week or so ago I had a realization: I'm not interested in surveillance law anymore.</p>
<p>It's clear to me that Congress is completely busted. The 113th Congress came <a href="http://www.pewresearch.org/fact-tank/2014/12/29/in-late-spurt-of-activity-congress-avoids-least-productive-title/">very, very close</a> to being the least productive Congress in modern history. Our current Congress isn't particularly good either, although they are (as far as I know) not as bad as the 113th - but they're still not good enough that I'm confident in their ability to actually, you know, pass laws. Even if we <em>could</em> get Congress to pass laws at all, it's unclear whether we could actually get them to pass laws curtailing mass surveillance. Over and over again we see Congress trying to pass misguided laws that weaken encryption, damage the DNS, and do all sorts of other seriously nasty (and hacky!) things - it just doesn't seem very reasonable to me to assume that they'd change their minds and decide to do (what we think is) the right thing[1].</p>
<p>This is why I'm not interested in surveillance law anymore. I find it to be a waste of time. Instead, I've shifted my focus towards systems that are fundamentally designed to resist surveillance and censorship. That's why I advocate for <a href="https://whispersystems.org/">Signal</a> and why I work on <a href="http://pump.io">pump.io</a>: because these are both systems designed from the ground up to, among other things, essentially be unaffected by surveillance law. Who cares if Congress passes a law that says they can surveil pump.io users? Congress saying a bunch of words doesn't change the fact that technically speaking, that's quite hard to do. Certainly it's more difficult than surveilling e.g. Facebook.</p>
<p>As Moxie Marlinspike puts it in <a href="https://youtu.be/xIiklPyS8MU?t=33m54s">this talk</a> on PKI's flaws and an alternative system called Convergence:</p>
<blockquote>
<p>And, you know, with this legislation that's been coming up recently like COICA and PROTECT IP and this kind of thing, you know - to me the real lesson here isn't whether this passes or not because there's been, you know, some kind of heroic efforts to prevent this legislation from going through. But I think, you know, the thing to take away from this is that they're <em>trying</em>. To pass regulation that messes with this stuff. And maybe one day they'll succeed.</p>
</blockquote>
<p>Trying to make Congress do the right thing is, I feel, akin to an endless arms race: they don't seem to be getting the message and it's doubtful that they'll stop in the near- or medium-term future.</p>
<p>A much better solution is this: implement secure-by-default, freedom-respecting, encrypted and/or federated systems, and be done. Forever.</p>
<p> [1]: honestly, I think a big problem with this is that a lot of Congress is old white guys. Emphasis on old. The problem of people in the legal sphere not understanding technology, especially technology relating to security, privacy and encryption, has cropped up before. Consider, for example, the judge who <a href="https://nakedsecurity.sophos.com/2016/07/01/judge-decides-we-dont-have-any-right-to-privacy/">ruled</a> that a Tor user had "no reasonable expectation of privacy" because he literally could not wrap his head around how Tor worked and what the FBI did.</p>
]]></description><link>https://strugee.net/blog/2017/01/surveillance-priorities</link><guid isPermaLink="true">https://strugee.net/blog/2017/01/surveillance-priorities</guid><category><![CDATA[politics]]></category><category><![CDATA[privacy]]></category><category><![CDATA[security]]></category><category><![CDATA[musings]]></category><pubDate>Mon, 23 Jan 2017 16:55:27 GMT</pubDate></item><item><title><![CDATA[Where we're headed (a.k.a. I'm worried)]]></title><description><![CDATA[<p>(These are some thoughts I've had after reading <a href="http://www.nytimes.com/2016/12/14/nyregion/donald-trump-democrats-lawsuits.html?_r=0">To Combat Trump, Democrats Ready a G.O.P. Tactic: Lawsuits</a> in the New York Times.)</p>
<p>I'm worried.</p>
<p>I'm worried about my country.</p>
<p>Believe it or not, I'm not talking about Trump. Of course he's horrible, and he's something to be seriously worried about, but I think he's really only a symptom of a much deeper issue in America, which is this: we are in an arms race with ourselves. (One might also describe it as civil war.)</p>
<p>I mean, think about it. Republicans (I'll get to Democrats in just a sec) have spent the last 8 years creating and perfecting tools to block legislation from going through. Government is about compromise, and they refuse to compromise. They shut down the government for cheap political points[1], continually and covertly passed <em>almost</em>-but-not-quite-unconstitutional antiabortion laws, and topped it all off with a taxpayer-funded lawsuit againt President Obama - just to name a few malicious maneuvers they've used.</p>
<p>Now that Republicans control both Congress <em>and</em> the White House, Democrats are gearing up to use those exact same tactics against Republicans. It's shameful behavior, and it's unbefitting for a democracy. This country is supposed to be about elected officials finding ways to compromise with each other so that everyone's as happy as possible, but instead it's turned into a situation where everyone is laser-focused on pushing through their full political agenda, no matter how unproductive it is and no matter what the cost.</p>
<p>Here's the big problem: I may think it's shameful behavior, but that doesn't mean I don't support the Dems. I completely support it, because the incoming administration's agenda is completely horrific to me. I support the Democrats' intent to utilize lawsuits because I don't think politics is just a game; it's life-or-death. Somewhere out there, there's a kid who's <em>dying</em> because conversion therapy has pushed them to the brink of suicide. It's a glaring human rights abuse, and Mike Pence wants to <em>fund</em> it.</p>
<p>Republicans may have invented the do-nothing Congress, but now they can't put the genie back in the bottle. The Democrats and the Republicans are now <em>stuck</em> in a legal arms race, and neither of them can turn back because then the other side would <em>destroy</em> them. And that makes me very worried, because if we're in an arms race, that begs the question: what's the breaking point? And what happens when we hit it?</p>
<p>I don't have the answer to these questions. I don't know how to stop us from reaching that breaking point. I dunno, maybe if we were all just... more patient? But sadly, that seems extremely unlikely. Sometimes I wonder if there simply isn't anything to be done - if America is the great experiment in democracy, maybe this is just the inevitable failure of that experiment.</p>
<p>All I really know is that we need to do something, and soon. Because if we don't, we will grind ourselves out of existence.</p>
<p>Footnotes:</p>
<p> [1]: we actually know for a fact - from staff present at an early meeting - that none of those orchestrating the shutdown believed it would accomplish anything. They just wanted to score points with their base. This is <em>fact</em>.</p>
]]></description><link>https://strugee.net/blog/2016/12/where-were-headed-aka-im-worried</link><guid isPermaLink="true">https://strugee.net/blog/2016/12/where-were-headed-aka-im-worried</guid><category><![CDATA[musings]]></category><category><![CDATA[politics]]></category><pubDate>Fri, 23 Dec 2016 01:43:35 GMT</pubDate></item><item><title><![CDATA['Free software' phrasing considered harmful]]></title><description><![CDATA[<p>For a while now I've been avoiding using the term "free software."</p>
<p>Why? It's just plain confusing to people. I know Richard Stallman will tell you that it means freedom, not gratis. <em>It doesn't matter</em>. It's still ambiguous and needlessly conflates two different concepts.</p>
<p>Instead of "free software," I propose "freedom-respecting software" as a replacement. This phrasing is not only unambigous, it also does a much more effective job of communicating the general meaning of the term without further explanation. (Of course you'll probably still need to explain it, but you'll have to spend a lot less time doing so.) The one problem with this phrasing is that it's longer, but even that doesn't hold water - because of the aformentioned problems with "free software," people actually don't say "free software" all that much; instead, they say "free (as in freedom) software" which is unambiguous, but awkward on multiple levels. Not only is it a less eloquent way of describing the concept, but gramatically speaking it's really terrible as it puts a parenthetical qualifier in-between an adjective and a noun, which just sounds <em>terrible</em> and unnatural. Seriously, say both of them out loud. "Freedom-respecting software" and "free (as in freedom) software" - which one sounds like less of a mouthful?</p>
<p>Hence, I think "free software" as a term should be considered harmful, and replaced with "freedom-respecting software" instead.</p>
<p><em>Edit 0:58 10/10/16:</em></p>
<p>Another advantage of "freedom-respecting software" is that it's still closely related to the old term, allowing for a much easier pivot. Consider "libre software" which AFAICT had the same goals as this proposal but never really took off - in part, I think, because it sounds very different from an already-established term. (Another way of putting this is that it's conceptually an improvement to an existing term instead of being something <em>brand-new</em>, and therefore all existing associations will carry over with far more ease.)</p>
<p>I'd also point out that the problem of ambiguity is more serious than I've said above. First of all, generally speaking I'm suspicious of any proposal or argument that begins or ends with "we just need to educate people more." Education is an important part of the freedom-respecting software movement - remember, that movement is by and for the people - but I think that argument is too frequently simply an excuse for a poor initial design. (Security, I'm looking at you.) Second, such an ambiguity also muddles our search results. When people search for "free software" they <em>do</em> get our stuff (a fact that I was pleasantly surprised by!) but they also get loads and loads of pages for gratis Windows crapware. That's unideal and it is unlikely to change, ever. Even if people <em>were</em> able to readily grasp the distinction between freedom and gratis that we're pitching, we will never, ever have enough influence on the language people use to get them to <em>stop</em> using "free" to mean gratis - which means that Google will continue showing gratis crapware as "free software."</p>
<p>Finally, as <a href="https://github.com/nylira/prism-break/issues/1601">pointed out</a> by some excellent PRISM Break contributors, me writing this blog post and then talking about it occasionally is a <em>far</em> dumber idea than directly contacting the FSF, which I now intend to do Real Soon Nowâ¢.</p>
]]></description><link>https://strugee.net/blog/2016/11/free-software-phrasing-considered-harmful</link><guid isPermaLink="true">https://strugee.net/blog/2016/11/free-software-phrasing-considered-harmful</guid><category><![CDATA[musings]]></category><pubDate>Wed, 09 Nov 2016 14:18:12 GMT</pubDate></item><item><title><![CDATA[GitHub's 'squash and merge' default considered harmful]]></title><description><![CDATA[<p>Recently GitHub launched two new ways to merge Pull Requests: "rebase and merge" and "squash and merge". That means that projects now have three ways to merge PRs:</p>
<ul>
<li>Merge - creates a merge commit merging the branch (even if it's fast-forwardable)</li>
<li>Rebase and merge - rebases on top of the target branch and fast-forwards</li>
<li>Squash and merge - rebases on top of the target branch, squashes all commits into a single commit, and fast-forwards</li>
</ul>
<p>Now, the default is "squash and merge", because apparently that's what people find to be the "prettiest" history. This bothers me for one simple reason: a squash and merge default means a <em>history destruction</em> default[1].</p>
<p>The whole point of commit squashing is to destroy history. Sometimes that's fine - for example, I might squash a typo fix into an earlier commit, because who cares that I typo'd <code>vare</code> instead of <code>var</code>? However, anything less trivial than typo fixes is valuable information about how the project evolved. Even if all of the commits just add stuff, and don't change what's happened earlier in the branch (i.e. even if the direction the implementation's taking doesn't change part-way through) the history contained in the branch is <em>still</em> valuable, because the branch's shortlog will give you a nice overview of exactly what changes happened in the branch. Now, you could of course make the argument that commit squashing shows that same information because by default, in both Git and GitHub, the commit messages being squashed are included in the suggested final commit message. I prefer keeping the individual commits, but that's a valid argument.</p>
<p>However, that doesn't change the fact that in cases where the implementation direction <em>does</em> change part-way through, GitHub's default is actively promoting the irrevocable[2] destruction of valuable history. Lots and lots of people use the GitHub Merge Button, especially those who are new to Git. This default is causing those people to unwittingly destroy valuable information. Sure, it looks nicer in the commit log, and I totally advocate for using squash and merge when it makes sense. But those cases are few and far between - it's basically just a small changes, plus a couple typo fixes or additions. And besides, I think it's far better to have a default of an ugly history rather than a default of an incomplete history. The former may not be the prettiest to look at, but the latter has the potential to actively stop people from doing their jobs[3].</p>
<p>For those curious, here's when I use each mode of the GitHub Merge Button:</p>
<ul>
<li>Merge - when I have a long-running branch that made significant changes and/or diverged significantly from the target branch. In this case, it's valuable to clearly distinguish what's part of the project and what isn't. Rebase and merge is no good because then it's not clear in the history when the branch started and ended. This is particularly evident when looking at <code>git log --graph</code>.</li>
<li>Rebase and merge - what I use most of the time. I use this when there were a couple small commits that were interesting enough to preserve the difference, but the overall change wasn't so huge that it needs to be clearly distinguished in the history. This provides a nice and pretty commit graph.</li>
<li>Squash and merge - I rarely use this. When I do, it's because all of the commits on some branch are <em>so</em> trivial, they really don't matter. Mostly this means that the overall change is tiny, and the only additional commits that are added are small additions to the first.</li>
</ul>
<p>So there you have it. How I use GitHub's Merge Button, and why I think the "squash and merge" default should be considered harmful.</p>
<p>Footnotes:</p>
<p> [1]: I'd like to point out that this is only a problem in Git. Mercurial has (or will have shortly) <a href="https://www.mercurial-scm.org/wiki/ChangesetEvolution">Changeset Evolution</a>, which keeps track of how changesets evolve over time. I.e. when you rewrite history, you're not losing any information.</p>
<p> [2]: I'm sure some of you are about to excitedly tell me about a fantastic tool called the reflog, and I really should read Pro Git because it's a fantastic book and has an entire chapter on data recovery. <em>I know</em>. The reflog is <em>not</em> the right answer for this; not only is it local to (likely) a single developer's machine, but it only stretches back a couple months and only works if the old, dangling commits aren't garbage-collected. By the time someone might be interested in looking at the history that was lost, it's probably far, far too late.</p>
<p> [3]: Another rarely-encountered but very serious problem with both "squash and merge" <em>and</em> "rebase and merge" is when people merge upstream changes in a PR. This is a perfectly legitimate workflow - PRs are great for discussing changes, etc. (although a lot of people think they're the <em>only</em> way to merge things, so they open PRs and then immediately merge them - this, IMHO, is very much <em>not</em> a legitimate workflow) - but if you do anything but merge (which includes both GitHub's "Merge" option and fast-forwarding locally on the CLI), you may have a Very Bad Time the next time you go to merge upstream changes to your fork. Why? Because in Git's view, the changes you merged the first time <em>haven't actually been merged</em>. After all, commit SHAs are nowhere to be found in the tree, since when you rewrote history you changed those IDs! Git has no way of knowing that your rewritten commits and the supposedly "unmerged" commits are basically equivalent. (Mercurial, on the other hand, would've kept track of this information and would have no problem at all.)</p>
]]></description><link>https://strugee.net/blog/2016/10/github-squash-and-merge-default-considered-harmful</link><guid isPermaLink="true">https://strugee.net/blog/2016/10/github-squash-and-merge-default-considered-harmful</guid><category><![CDATA[musings]]></category><pubDate>Wed, 19 Oct 2016 17:40:18 GMT</pubDate></item><item><title><![CDATA[Android freedom]]></title><description><![CDATA[<p>Recently I backed up and restored both my Android phone and my Android tablet. There were a couple reasons for both of these. The tablet had been borked for quite a long time (any time I tried to upgrade it from the Android 5.0 build it was running, it failed - also the thing just froze randomly). The phone was on the CyanogenMod nightly channel and I wanted to switch to the snapshot channel, plus within the past couple days both WiFi and the cell network data connection straight up stopped working so it was pretty unusable. At first I wanted to switch to <a href="https://copperhead.co/android/">CopperheadOS</a> on both devices. CopperheadOS doesn't support GApps and will probably never support GApps (for very good reasons), and I said, maybe I can make it work. Sadly, I couldn't - I still regrettably need stuff from the Google Play Store. (The tablet ended up back on stock because I want fast upgrades, and the phone ended up on CyanogenMod because they have the fastest upgrades while still offering root.)</p>
<p>The whole experience made me think, though - what would it take to create something that functioned like GApps, but respected your freedom? I'm sure some people reading are already scrambling to link me to their favorite Google Play Services reimplementation, but this isn't the only thing that's in GApps. You gotta think about the user experience, too. Such a system should be able to:</p>
<ul>
<li>Provide the nice APIs that Google Play Services does</li>
<li>Store your photos in the cloud, like Google Photos</li>
<li>Related to the above, automatically backup and restore apps and their data</li>
<li>Transfer from other devices, similar to the above item</li>
<li>Support functionality like Google Now</li>
<li>Ditto for Google Assistant</li>
<li>Integrate into the initial device setup to configure all this stuff</li>
</ul>
<p>I'm sure there are more that I've missed.</p>
<p>Honestly, we're actually quite close to this. The first bullet can be mostly accomplished with something like <a href="https://microg.org/">microG</a>. Automatic backup and photo storage needs a UI, but fundamentally can be accomplished with any generic WebDAV implementation. F-Droid can be used as the app store. Imagine this: you take a bunch of photos and install a bunch of freedom-respecting apps on your phone. Then, you get a new one. When you set it up, the phone prompts you to sign in to your WebDAV account (which could be e.g. ownCloud, or a WebDAV implementation on <a href="https://sandstorm.io/">Sandstorm</a>) and then automatically reinstalls all your apps from F-Droid, as well as retrieving their data from ownCloud. When you open the built-in gallery app, all your photos are already there because they're seamlessly backed up to the cloud. <em>Your</em> cloud. Transfer can be accomplished in a lot of ways, but I can easily see it building on the above.</p>
<p>Supporting something like Google Now is non-trivial, but I've even already proposed <a href="https://github.com/cantino/huginn/issues/1583">a feature for Huginn</a> that would make this possible. Google Assistant would be very, very difficult, but even without that, we'd have come a long way.</p>
<p>This reality is not that far off. What's missing is some UI pieces and a nice ZIP that can be flashed on top of ROMs, similar to how GApps are flashed today. So who's going to put it all together?</p>
<p>(I suppose I've just volunteered myself - oh well... I'll just add it to my endless list of projects.)</p>
]]></description><link>https://strugee.net/blog/2016/10/android-freedom</link><guid isPermaLink="true">https://strugee.net/blog/2016/10/android-freedom</guid><category><![CDATA[musings]]></category><pubDate>Mon, 17 Oct 2016 19:40:43 GMT</pubDate></item><item><title><![CDATA[Re: Bitcoin, Magical Thinking, and Political Ideology]]></title><description><![CDATA[<p><em>Editorial note: I published this almost three years ago on my Tumblr, which I keep semi-private and so don't want to link to. This is a verbatim repost from there, despite the fact that I disagree with some portions of this text nowadays.</em></p>
<h2><a href="https://al3x.net/2013/12/18/bitcoin.html">Bitcoin, Magical Thinking, and Political Ideology</a></h2>
<p><a href="http://edwardspoonhands.com/post/71550289177/bitcoin-magical-thinking-and-political-ideology">edwardspoonhands</a>:</p>
<blockquote>
<p>I get asked all the time what I think of BitConâ¦this guy says it better than I could.</p>
</blockquote>
<p>+1 for linking to something by Alex Payne. I love him.</p>
<p>About the actual content, at one point Alex says this:</p>
<blockquote>
<p>Weâre told that Bitcoin âfixes serious problems with existing payment systems that depend on centralized services to verify the validity of transactions.â If by âfixesâ you mean âignoresâ, then yes: a Bitcoin transaction, like cash, comes with the certainty that a definite quantity of a store of value has changed hands, and little else. How this verifies any âvalidityâ or cuts down on fraud Iâm not sure; stolen Bitcoins are spent as easily as stolen cash, which is why <a href="http://www.cnbc.com/2013/11/20/more-bitcoins-more-problems-how-hackers-are-targeting-bitcoins.html">theft of Bitcoins has been rampant</a>.</p>
</blockquote>
<p>I think the concern isnât with fraud or validity. The problem that Bitcoin solves is with the centralized banking model. The fundamental idea behind Bitcoin is that it cannot be centrally controlled or taken down, like the internet. It is impossible to flip a switch and âturn offâ the Bitcoin network. It <em>is</em> possible to do that with a centralized bank: in that case, âflipping the switchâ ends up being âshut down the bankâ. Or, âdrive the bank out of businessâ.</p>
<pre><code>If Bitcoinâs strength comes from decentralization, why pour millions into a single company? Ah, because Coinbase provides an âaccessible interface to the Bitcoin protocolâ, weâre told. We must centralize to decentralize, you see; such is the perverse logic of capital co-opting power. In order for Bitcoin to grow a thriving ecosystem, it apparently needs a US-based, VC-backed company that has âworked closely with banks and regulators to ensure that the service is safe and compliantâ.
</code></pre>
<p>Maybe the problem isnât with Bitcoin itself, but with what Coinbase is doing with the Bitcoin protocol. Now, to be clear, I think the Bitcoin to USD bridge aspect of Coinbase is OK. But I think that this paragraph is very, very true: it is <em>perverse</em> that we have centralized a decentralized protocol. Decentralized protocols tend to be very dangerous, IMHO, because of the tendency of users to just go with the most popular provider because itâs the easiest solution, and then effectively centralizing the network in the process.</p>
<p>Anyone remember XMPP? XMPP was supposed to be great. It was supposed to be the future of communications on the internet. But in practice, XMPP servers are unreliable. Itâs hard to find one that works well. I donât actually use XMPP a lot myself, but there are a lot of problems with connections, chat requests being undone (so you have to add a contact for a second time), etc. So what happened because of these problems (and the fact that everyone uses Gmail)? The most-used XMPP server is talk.google.com. At least it was, until Google replaced Google Talk with Google Hangouts, which uses a proprietary protocol with no XMPP bridge - and so the network got screwed over, because suddenly, a lot of people upgraded to Hangouts and cut themselves off from the XMPP network. The sad truth, though, is that it almost doesnât matter. Take a survey of any random Google Talk user. I will bet you $100 that less than 1 out of 50 people who you talk to wonât know that Google Talk is based on XMPP, much less what XMPP is. And thereâs almost zero chance that they understand why XMPP matters, or why federated protocols and networks matter.</p>
<p>Iâm getting off track, though. So back to Bitcoin and Coinbase. I think what Coinbase is doing by hosting peopleâs Bitcoin wallets and transactions is fundamentally <em>wrong</em>, because I truly believe that it damages the Bitcoin ecosystem. The centralization in Coinbase is, IMHO, a major problem.</p>
<p>I wonder if this will be solved with a project like <a href="https://arkos.io/">arkOS</a>. I mean, maybe the solutionv that will ultimately happen is for people to spin up their own instances of a Coinbase-like Bitcoin wallet. I think itâs pretty clear that people, in general, like cloud apps better than desktop apps. Access from any computer is a really nice feature to have. Maybe projects like arkOS will help decentralized protocols like Bitcoin remain decentralized in practice.</p>
<p>Or maybe Bitcoin will effectively die, just like XMPP did. I mean, sure, XMPP is still a network. But no one really uses it consciously. Almost everyone who uses XMPP nowadays does so accidentally, through a service that just happens to have an XMPP bridge. Google Talk was a prime example of this, but itâs dead. Now, Iâll bet money that the most-used XMPP provider is Facebook. Never knew that Facebook Chat had an XMPP bridge? Thatâs because Facebook doesnât advertise it; the only time itâs mentioned is in the developer docs. The mainstream does not care about the XMPP protocol, because we centralized it. What the mainstream <em>does</em> care about is the services that we centralized it on: Google and Facebook. And thatâs a real problem.</p>
]]></description><link>https://strugee.net/blog/2016/05/re-bitcoin</link><guid isPermaLink="true">https://strugee.net/blog/2016/05/re-bitcoin</guid><category><![CDATA[musings]]></category><pubDate>Wed, 11 May 2016 10:18:00 GMT</pubDate></item><item><title><![CDATA[Programming as an art form]]></title><description><![CDATA[<p>The other day I described programming to someone. I pointed out that it's actually pretty easy to teach yourself programming languages, especially since after a while you start to carry over concepts from other languages. But what surprised me most about <em>my own explanation</em>(!) was when I compared programming to art: it's the kind of thing where you can just try stuff out and see what works and what doesn't, with no real consequences.</p>
<p>Since I said that, I've actually been thinking about it quite a bit. Programming is traditionally described as an activity closely related to mathematics, and to a certain extent, this makes a lot of sense, because of the logical skills that go into programming. You have to be able to reason your way through situations in order to effectively debug a program, which means logically eliminating possible points of failure. This is where math skills become very important.</p>
<p>But coding isn't just about logic. At <a href="http://opensourcebridge.org/">OSBRIDGE</a> this year, I attended a session about the beauty of code - it's hard to describe to someone who doesn't live and breathe code, but we all know it when we see it. We as a community value elegance in code; clever algorithms; thinking outside the box, and as I said in my <a href="https://strugee.net/presentation-just-do-it/#19">Just Do It slides</a>, the mere existance of Ruby proves this. So when I described programming as being like art, part of where I was getting that is the analogy I actually said (being able to easily mess around), but part of it was coming from my appreciation of the beauty of code. Part of it was coming from my sense of the aesthetic properties of programming.</p>
<p>I want us, as a community, in both our regular coding but also our educational outreach, to stop pretending that programming is so logical that it <em>is</em> math. Yes, there are elements of mathematics in coding. Lots of it, even. But to treat programming as a branch of mathematics is doing a disservice to the practice. So in addition to treating programming as a form of math, I want us to start treating programming as a form of art. There <em>is</em> such a thing as ugly code. The entire concept of refactoring would barely exist if that wasn't true. So let's start truly appreciating the aesthetic beauty of code, and let's start teaching that. To be honest, I'm not sure how you would teach that. But it couldn't hurt to try.</p>
<p>But even if we can and should treat it as both of those things, that doesn't mean that we should make that the be-all-end-all of how we describe programming. I truly believe that programming is not a branch of mathematics. And it's not an art form, either. Programming is neither of those things and both of those things; it is something entirely new, and we should treat it as such. If this isn't true, why do people swear by certain software? Why do people (including myself) aggressively sticker their laptops to showcase what software they use? And if this isn't true, how is it possible that people <em>love</em> their code?</p>
]]></description><link>https://strugee.net/blog/2015/11/programming-as-an-art-form</link><guid isPermaLink="true">https://strugee.net/blog/2015/11/programming-as-an-art-form</guid><category><![CDATA[development]]></category><category><![CDATA[musings]]></category><pubDate>Sun, 08 Nov 2015 20:17:38 GMT</pubDate></item></channel></rss>