<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[strugee.net blog - January - 2018]]></title><description><![CDATA[strugee.net blog - January - 2018]]></description><link>https://strugee.net/blog/2018/01</link><generator>stratic-indexes-to-rss</generator><lastBuildDate>Fri, 19 Jan 2018 03:22:33 GMT</lastBuildDate><atom:link href="https://strugee.net/blog/2018/01/index.rss" rel="self" type="application/rss+xml"/><copyright><![CDATA[© Copyright 2012-2018 AJ Jordan. Available under the GNU Affero GPL.]]></copyright><webMaster><![CDATA[AJ Jordan <alex@strugee.net>]]></webMaster><item><title><![CDATA[Improving GPG security]]></title><description><![CDATA[<p>Recently I've been putting some effort into improving the security of my <a href="https://strugee.net/gpg">GPG key</a> setup, and I thought I would take a moment to document it since I'm really excited!</p>
<h1>Nitrokey</h1>
<p>First, and most importantly, I have recently acquired a <a href="https://www.nitrokey.com/">Nitrokey Storage</a>. After I initialized the internal storage keys (which took a <em>really</em> long time), I used <code>gpg --edit-key</code> to edit my local keyring. I selected my first subkey, since in my day-to-day keyring the master key's private component is stripped, and issued <code>keytocard</code> to move the subkey to the Nitrokey. Then I repeated the process for the other subkey.</p>
<p>In the middle of this I <em>did</em> run into an annoying issue: GPG was giving me errors about not having a pinentry, even though the <code>pinentry-curses</code> and <code>pinentry-gnome3</code> packages were <em>clearly</em> installed. I had been dealing with this issue pretty much since I set up the system, and I had been working around it by issuing <code>echo "test" | gpg2 --pinentry-mode loopback --clearsign &gt; /dev/null</code> every time I wanted to perform a key operation. This worked because I was forcing GPG to not use the system pinentry program and instead just prompt directly on the local TTY; since I had put in the password, <code>gpg-agent</code> would then have the password cached for a while so I could do the key operation without GPG needing to prompt for a password (and thus without the pinentry error). However, this didn't seem to work for <code>--edit-key</code>, which I found supremely annoying.</p>
<p>However this turned out to be a good thing because it forced me to <em>finally</em> deal with the issue. I tried lots of things in an effort to figure out what was going on: I ran <code>dpkg-reconfigure pinentry-gnome3</code>, <code>dpkg-reconfigure gnupg2</code>, and I even manually ran <code>/usr/bin/pinentry</code> to make sure it was working. Turns out that, like many helpful protocols, the pinentry protocol lets you send <code>HELP</code>, and if you do so you'll get back a really nice list of possible commands. I played around with this and was able to get GNOME Shell to prompt me for a password, which was then echoed back to me in the terminal!</p>
<p>Despite feeling cool because of that, I still had the pinentry problem. So finally I just started searching all the GPG manpages for mentions of "pinentry". I looked at <code>gpg(1)</code> first, which was unhelpful, and then I looked at <code>gpgconf(1)</code>. That one was also <em>mostly</em> unhelpful, but the "SEE ALSO" section <em>did</em> make me think to look at <code>gpg-agent(1)</code>, where I hit upon the solution. Turns out <code>gpg-agent(1)</code> has a note about pinentry programs right at the very top, in the "DESCRIPTION" section:</p>
<blockquote>
<p>Please make sure that a proper pinentry program has been installed under the default filename (which is system dependent) or use the option <code>pinentry-program</code> to specify the full name of that program.</p>
</blockquote>
<p>The mention of the <code>pinentry-program</code> option led me pretty immediately to my solution. I had originally copied my <code>.gnupg</code> directory from my old MacBook Pro, and apparently GPGTools - a Mac package that integrated GPG nicely with the environment (as well as providing a GUI I never used) - had added its own <code>pinentry-program</code> line to <code>gpg-agent.conf</code>. That line pointed at a path installed by GPGTools, which of course didn't exist on my new Linux system. As soon as I removed the line, <code>--edit-key</code> worked like a charm. (I've also just added <code>gpg-agent.conf</code> to my <a href="https://github.com/strugee/dots/blob/master/.gnupg/gpg-agent.conf">dotfiles</a> so I notice this kind of thing in the future.)</p>
<p>So far, I'm really enjoying my Nitrokey. It works really well and the app is pretty good, although the menu can be pretty glitchy sometimes. I've used the password manager for a couple high-security passwords (mostly bank passwords) which is great, and I've switched my two-factor authentication for GitHub from FreeOTP on my phone to the Nitrokey since GitHub is a super important account and I really want to make sure people can't push code as me.</p>
<p>There are only two problems I've had with the Nitrokey so far. The first is that it's slow. I notice a significant pause when I do any crypto operation, probably somewhere between a half a second to a second. This hits me quite often since I sign all my Git commits; however I suspect I'll get used to this, and the security benefits are well worth the wait anyway. The other problem is that the Nitrokey doesn't support FIDO U2F authentication. This wasn't a surprise (I knew it wouldn't when I was shopping models) but is nevertheless a problem I would like to deal with (which means getting a second device). The basic reason is just that U2F is newer than the Nitrokey I have. Other than those, though, I would highly recommend Nitrokey. The device is durable, too - I just carry it around in my pocket. (I briefly considered putting it on my keychain - for those of you who haven't met me in person, I have my keychain on an easily-detachable connector attached to a belt loop - but I decided against it because my keychain is kinda hefty.)</p>
<h1>Keybase</h1>
<p>In addition to the Nitrokey, I've also finally started using <a href="https://keybase.io/">Keybase</a>!</p>
<p>For a long time I wasn't too sure about Keybase. I felt like people should really be meeting in person and doing keysigning parties, and I didn't like that they encourage you to upload a private key to them, even if it's password-protected. Eventually I softened my position a little bit and got an invite from <a href="https://keybase.io/yawnbox">Christopher Sheats</a> (back then you needed an invite) but I only made it halfway through the install process before getting distracted and forgetting about it for, you know, several years.</p>
<p>This time, though, I decided to finally get my act together. Do I still kinda think it's a bummer that Keybase encourages private key uploads? Sure. Are real-life keysignings better? <em>Absolutely</em>. But even though they're better, a lot of experience trying to do them and teach them has thoroughly convinced me that they're just too impractical. There are lots of people who might need to at least have <em>some</em> trust in my key - for example, to verify software signatures - and this is a pretty decent solution for them. Not to mention a novel and interesting solution. Plus, it's possible to use Keybase in such a way that you're not compromising security in any way, which is the way I do it.</p>
<p>So tl;dr: I'm on the Keybase bandwagon now. <a href="https://keybase.io/strugee">My profile</a> is also now linked to from my <a href="https://strugee.net/gpg">GPG keys</a> page.</p>
<h1>Safe for master key</h1>
<p>Finally, my dad's wife's safe has recently been moved into our house and is conveniently sitting next to my computer. Currently, I keep my master key in a file on a flash drive with an encrypted LUKS container. When I need to access my master key, this file gets unlocked with <code>cryptsetup</code> and then mounted somewhere on my laptop, and I pass the <code>--homedir</code> option to <code>gpg</code> to point it at the mount location. This is better than just keeping the master lying around day-to-day, but still pretty unideal as I'm exposing it to a potentially compromised, non-airgapped computer. Therefore I plan to get a Raspberry Pi (or something similar) and put it in the safe so I can use it as a fully trusted computer that's never been connected to the internet (and is therefore <em>very</em> hard to compromise). I'll keep the Pi in the safe to provide greater assurance that it hasn't been tampered with, as well as to provide a physical level of redundancy for the key material's security. This will hopefully happen Real Soon Now™ - I can't wait!</p>
]]></description><link>https://strugee.net/blog/2018/01/improving-gpg-security</link><guid isPermaLink="true">https://strugee.net/blog/2018/01/improving-gpg-security</guid><category><![CDATA[security]]></category><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Tue, 16 Jan 2018 23:01:13 GMT</pubDate></item><item><title><![CDATA[Tell your PR reviewers they're wrong]]></title><description><![CDATA[<p>Have you ever submitted a Pull Request and had the maintainer give you feedback that says something is wrong? This is of course, perfectly natural, and is why we do Pull Request reviews in the first place. But have you ever thought it was actually the <em>maintainer</em> doing the review who was wrong?</p>
<p>I'm the maintainer of a number of open source/free software projects and I have a message for you: <strong><em>tell this to the maintainer</em>, even if you're new, even if you feel like you have no idea what you're doing</strong>.</p>
<p>I'm sure to some people more experienced this sounds like obvious advice, but when you're new to this stuff getting feedback can be really scary. Maintainers have often spent years in the free software community and are super comfortable with how things work, not to mention that they might be more experienced in the language or framework their project uses. So it's super easy to just take their word as gospel. But I think it's super important to remember that everyone's human just like everyone else, and <em>everyone</em> has something to learn.</p>
<p>As a concrete example, take <a href="https://github.com/pump-io/pump.io/pull/1310#issuecomment-291554491">this comment</a> on a Pull Request I received. If you read it and the following comment, I seem like an expert on <code>eval()</code>, but what you don't see until you read all the way to the bottom is that I spent about 20 minutes composing that comment because I had to double-check MDN to make sure I was actually correct. And honestly, that was <em>great</em>. That Pull Request forced me to recheck what I thought about the way <code>eval()</code> worked, <em>and</em> the contributor learned from it too! So it ended up being a win-win. Even if I was wrong, that would have been great too, since I would've learned something new. Sometimes the thing being discussed is just a really tough or confusing problem, and getting feedback on a PR can be a really awesome chance for both you <em>and</em> the maintainer to collaborate more closely and figure it out together!</p>
<p>I'm sure this won't work in every community. But honestly, if it doesn't, the maintainer you're running into is probably an ass and not worth bothering with anyway. This is what doing things in the open is all about - <a href="https://www.gnu.org/philosophy/free-sw.html">freedom 1</a>, after all, is "the freedom to study the source code and make changes", the operative word being "study". The fact that knowledge is shared out in the open with anyone who wants it is one of the most amazing parts of this community, and I want to encourage you to stay curious and ask lots of questions.</p>
<p>So if you've ever walked away from a Pull Request review feeling like something wasn't quite right, consider this your permission slip to politely <em>tell your reviewer you think they're wrong</em>[1] - just make sure to be polite and explain why you think so! And remember, whatever they say, they're not criticizing you personally. I hope you embrace it as an opportunity to grow.</p>
<p>Footnotes:</p>
<p>[1]: Phrasing this as "I think you're wrong" instead of "you're wrong" is great for a lot of reasons, but one notable and less obvious one is that if the maintainer <em>does</em> end up being right, you won't feel silly.</p>
<p><em>Edited to clarify that I'm not advocating inpoliteness, to change the phrasing to "I</em> think <em>you're wrong", and to add some nice framing around a chance to collaborate on a difficult problem. Thanks to the Recurse Center folks whose feedback turned into these changes, particularly <a href="https://www.harihareswara.net/">Sumana Harihareswara</a> and <a href="https://jvns.ca/">Julia Evans</a>.</em></p>
]]></description><link>https://strugee.net/blog/2018/01/tell-your-pr-reviewers-theyre-wrong</link><guid isPermaLink="true">https://strugee.net/blog/2018/01/tell-your-pr-reviewers-theyre-wrong</guid><category><![CDATA[tips]]></category><category><![CDATA[culture]]></category><category><![CDATA[blaggregator]]></category><pubDate>Mon, 08 Jan 2018 03:04:55 GMT</pubDate></item><item><title><![CDATA[pump.io 5.1 stable published to npm]]></title><description><![CDATA[<p>Last night I officially published pump.io 5.1 to npm as a stable release!</p>
<p>As I wrote in the beta announcement, this release contains a variety of improvements:</p>
<ul>
<li><a href="https://strugee.net/blog/2017/08/zero-downtime-restarts-have-landed">Zero-downtime restarts</a>, which allows administrators to seamlessly roll over to new configurations and codebases</li>
<li>The daemon now generates startup log warnings on bad configurations, including insecure <code>secret</code> values and internal parameters</li>
<li>An official <code>Dockerfile</code> is now included with the release</li>
<li>The logged-out mobile homepage's menu icon is no longer incorrectly styled as black</li>
<li>An authorization problem with SockJS connections has been fixed</li>
</ul>
<p>5.1 stable <em>does</em> include one change the beta didn't: a bump to the version of the <code>gm</code> npm package which we depend on. This bump was done as a precautionary measure, as previous versions of <code>gm</code> depended on a version of the <code>debug</code> module which was vulnerable to denial-of-service security bugs.</p>
<p>As a project, we addressed these bugs <a href="https://strugee.net/blog/2017/10/denial-of-service-security-fixes-now-available">back in October</a> when we issued security releases for all supported release branches, and at the time we confirmed that the vulnerable function wasn't used by <code>gm</code>. Today's <code>gm</code> bump does <em>not</em> constitute a security release; instead, we're just bumping the version as a precautionary measure in case we missed something in October's assessment of the situation.</p>
<p>Aside from the <code>gm</code> bump, there are (as usual) miscellaneous version bumps included in this release. We've also started tracking test suite coverage information as well as overhauled our <a href="https://pumpio.readthedocs.io/">documentation on ReadTheDocs</a>, moving most of the in-repository documentation there.</p>
<p>If you want even more details of this release, you can also check out <a href="https://github.com/pump-io/pump.io/blob/master/CHANGELOG.md#510---2018-01-05">the changelog</a>.</p>
<p>pump 5.1 is a drop-in replacement for 5.0. That means if you're using our recommended installation method and installing from npm, you can upgrade with <code>npm install -g pump.io@5.1</code>. If you have a source-based install, you should merge and/or switch to the <code>v5.1.0</code> tag. And as always, if you encounter any problems, please feel free to reach out to the <a href="https://github.com/pump-io/pump.io/wiki/Community">community</a> or <a href="https://github.com/pump-io/pump.io/issues">file bugs you find</a>.</p>
<p>Finally, I would be remiss if I didn't point out that pump.io has a <strong>brand-new announcement mailing list</strong>! While the blog is great for announcing new releases, not everyone finds it convenient to check. Also, if we issue new betas in the middle of a release cycle, these aren't typically announced on the blog. Therefore in the future <em>all</em> new releases will be announced on the mailing list, not just initial betas. If you want to subscribe to the mailing list, you may do so <a href="https://lists.strugee.net/mailman/listinfo/pumpio-announce">here</a> - you'll get announcements of new features only, not e.g. feature announcements as seen on this blog. I hope people find this service useful!</p>
]]></description><link>https://strugee.net/blog/2018/01/pump.io-5.1-stable-published-to-npm</link><guid isPermaLink="true">https://strugee.net/blog/2018/01/pump.io-5.1-stable-published-to-npm</guid><category><![CDATA[pump.io]]></category><category><![CDATA[development]]></category><category><![CDATA[releases]]></category><category><![CDATA[blaggregator]]></category><pubDate>Sat, 06 Jan 2018 04:09:43 GMT</pubDate></item></channel></rss>