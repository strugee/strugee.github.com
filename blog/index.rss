<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[strugee.net blog]]></title><description><![CDATA[strugee.net blog]]></description><link>https://strugee.net/blog/</link><generator>stratic-indexes-to-rss</generator><lastBuildDate>Wed, 17 Jan 2018 06:12:33 GMT</lastBuildDate><atom:link href="https://strugee.net/blog//index.rss" rel="self" type="application/rss+xml"/><copyright><![CDATA[© Copyright 2012-2018 AJ Jordan. Available under the GNU Affero GPL.]]></copyright><webMaster><![CDATA[AJ Jordan <alex@strugee.net>]]></webMaster><item><title><![CDATA[Improving GPG security]]></title><description><![CDATA[<p>Recently I've been putting some effort into improving the security of my <a href="https://strugee.net/gpg">GPG key</a> setup, and I thought I would take a moment to document it since I'm really excited!</p>
<h1>Nitrokey</h1>
<p>First, and most importantly, I have recently acquired a <a href="https://www.nitrokey.com/">Nitrokey Storage</a>. After I initialized the internal storage keys (which took a <em>really</em> long time), I used <code>gpg --edit-key</code> to edit my local keyring. I selected my first subkey, since in my day-to-day keyring the master key's private component is stripped, and issued <code>keytocard</code> to move the subkey to the Nitrokey. Then I repeated the process for the other subkey.</p>
<p>In the middle of this I <em>did</em> run into an annoying issue: GPG was giving me errors about not having a pinentry, even though the <code>pinentry-curses</code> and <code>pinentry-gnome3</code> packages were <em>clearly</em> installed. I had been dealing with this issue pretty much since I set up the system, and I had been working around it by issuing <code>echo "test" | gpg2 --pinentry-mode loopback --clearsign &gt; /dev/null</code> every time I wanted to perform a key operation. This worked because I was forcing GPG to not use the system pinentry program and instead just prompt directly on the local TTY; since I had put in the password, <code>gpg-agent</code> would then have the password cached for a while so I could do the key operation without GPG needing to prompt for a password (and thus without the pinentry error). However, this didn't seem to work for <code>--edit-key</code>, which I found supremely annoying.</p>
<p>However this turned out to be a good thing because it forced me to <em>finally</em> deal with the issue. I tried lots of things in an effort to figure out what was going on: I ran <code>dpkg-reconfigure pinentry-gnome3</code>, <code>dpkg-reconfigure gnupg2</code>, and I even manually ran <code>/usr/bin/pinentry</code> to make sure it was working. Turns out that, like many helpful protocols, the pinentry protocol lets you send <code>HELP</code>, and if you do so you'll get back a really nice list of possible commands. I played around with this and was able to get GNOME Shell to prompt me for a password, which was then echoed back to me in the terminal!</p>
<p>Despite feeling cool because of that, I still had the pinentry problem. So finally I just started searching all the GPG manpages for mentions of "pinentry". I looked at <code>gpg(1)</code> first, which was unhelpful, and then I looked at <code>gpgconf(1)</code>. That one was also <em>mostly</em> unhelpful, but the "SEE ALSO" section <em>did</em> make me think to look at <code>gpg-agent(1)</code>, where I hit upon the solution. Turns out <code>gpg-agent(1)</code> has a note about pinentry programs right at the very top, in the "DESCRIPTION" section:</p>
<blockquote>
<p>Please make sure that a proper pinentry program has been installed under the default filename (which is system dependent) or use the option <code>pinentry-program</code> to specify the full name of that program.</p>
</blockquote>
<p>The mention of the <code>pinentry-program</code> option led me pretty immediately to my solution. I had originally copied my <code>.gnupg</code> directory from my old MacBook Pro, and apparently GPGTools - a Mac package that integrated GPG nicely with the environment (as well as providing a GUI I never used) - had added its own <code>pinentry-program</code> line to <code>gpg-agent.conf</code>. That line pointed at a path installed by GPGTools, which of course didn't exist on my new Linux system. As soon as I removed the line, <code>--edit-key</code> worked like a charm. (I've also just added <code>gpg-agent.conf</code> to my <a href="https://github.com/strugee/dots/blob/master/.gnupg/gpg-agent.conf">dotfiles</a> so I notice this kind of thing in the future.)</p>
<p>So far, I'm really enjoying my Nitrokey. It works really well and the app is pretty good, although the menu can be pretty glitchy sometimes. I've used the password manager for a couple high-security passwords (mostly bank passwords) which is great, and I've switched my two-factor authentication for GitHub from FreeOTP on my phone to the Nitrokey since GitHub is a super important account and I really want to make sure people can't push code as me.</p>
<p>There are only two problems I've had with the Nitrokey so far. The first is that it's slow. I notice a significant pause when I do any crypto operation, probably somewhere between a half a second to a second. This hits me quite often since I sign all my Git commits; however I suspect I'll get used to this, and the security benefits are well worth the wait anyway. The other problem is that the Nitrokey doesn't support FIDO U2F authentication. This wasn't a surprise (I knew it wouldn't when I was shopping models) but is nevertheless a problem I would like to deal with (which means getting a second device). The basic reason is just that U2F is newer than the Nitrokey I have. Other than those, though, I would highly recommend Nitrokey. The device is durable, too - I just carry it around in my pocket. (I briefly considered putting it on my keychain - for those of you who haven't met me in person, I have my keychain on an easily-detachable connector attached to a belt loop - but I decided against it because my keychain is kinda hefty.)</p>
<h1>Keybase</h1>
<p>In addition to the Nitrokey, I've also finally started using <a href="https://keybase.io/">Keybase</a>!</p>
<p>For a long time I wasn't too sure about Keybase. I felt like people should really be meeting in person and doing keysigning parties, and I didn't like that they encourage you to upload a private key to them, even if it's password-protected. Eventually I softened my position a little bit and got an invite from <a href="https://keybase.io/yawnbox">Christopher Sheats</a> (back then you needed an invite) but I only made it halfway through the install process before getting distracted and forgetting about it for, you know, several years.</p>
<p>This time, though, I decided to finally get my act together. Do I still kinda think it's a bummer that Keybase encourages private key uploads? Sure. Are real-life keysignings better? <em>Absolutely</em>. But even though they're better, a lot of experience trying to do them and teach them has thoroughly convinced me that they're just too impractical. There are lots of people who might need to at least have <em>some</em> trust in my key - for example, to verify software signatures - and this is a pretty decent solution for them. Not to mention a novel and interesting solution. Plus, it's possible to use Keybase in such a way that you're not compromising security in any way, which is the way I do it.</p>
<p>So tl;dr: I'm on the Keybase bandwagon now. <a href="https://keybase.io/strugee">My profile</a> is also now linked to from my <a href="https://strugee.net/gpg">GPG keys</a> page.</p>
<h1>Safe for master key</h1>
<p>Finally, my dad's wife's safe has recently been moved into our house and is conveniently sitting next to my computer. Currently, I keep my master key in a file on a flash drive with an encrypted LUKS container. When I need to access my master key, this file gets unlocked with <code>cryptsetup</code> and then mounted somewhere on my laptop, and I pass the <code>--homedir</code> option to <code>gpg</code> to point it at the mount location. This is better than just keeping the master lying around day-to-day, but still pretty unideal as I'm exposing it to a potentially compromised, non-airgapped computer. Therefore I plan to get a Raspberry Pi (or something similar) and put it in the safe so I can use it as a fully trusted computer that's never been connected to the internet (and is therefore <em>very</em> hard to compromise). I'll keep the Pi in the safe to provide greater assurance that it hasn't been tampered with, as well as to provide a physical level of redundancy for the key material's security. This will hopefully happen Real Soon Now™ - I can't wait!</p>
]]></description><link>https://strugee.net/blog/2018/01/improving-gpg-security</link><guid isPermaLink="true">https://strugee.net/blog/2018/01/improving-gpg-security</guid><category><![CDATA[security]]></category><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Tue, 16 Jan 2018 23:01:13 GMT</pubDate></item><item><title><![CDATA[Tell your PR reviewers they're wrong]]></title><description><![CDATA[<p>Have you ever submitted a Pull Request and had the maintainer give you feedback that says something is wrong? This is of course, perfectly natural, and is why we do Pull Request reviews in the first place. But have you ever thought it was actually the <em>maintainer</em> doing the review who was wrong?</p>
<p>I'm the maintainer of a number of open source/free software projects and I have a message for you: <strong><em>tell this to the maintainer</em>, even if you're new, even if you feel like you have no idea what you're doing</strong>.</p>
<p>I'm sure to some people more experienced this sounds like obvious advice, but when you're new to this stuff getting feedback can be really scary. Maintainers have often spent years in the free software community and are super comfortable with how things work, not to mention that they might be more experienced in the language or framework their project uses. So it's super easy to just take their word as gospel. But I think it's super important to remember that everyone's human just like everyone else, and <em>everyone</em> has something to learn.</p>
<p>As a concrete example, take <a href="https://github.com/pump-io/pump.io/pull/1310#issuecomment-291554491">this comment</a> on a Pull Request I received. If you read it and the following comment, I seem like an expert on <code>eval()</code>, but what you don't see until you read all the way to the bottom is that I spent about 20 minutes composing that comment because I had to double-check MDN to make sure I was actually correct. And honestly, that was <em>great</em>. That Pull Request forced me to recheck what I thought about the way <code>eval()</code> worked, <em>and</em> the contributor learned from it too! So it ended up being a win-win. Even if I was wrong, that would have been great too, since I would've learned something new. Sometimes the thing being discussed is just a really tough or confusing problem, and getting feedback on a PR can be a really awesome chance for both you <em>and</em> the maintainer to collaborate more closely and figure it out together!</p>
<p>I'm sure this won't work in every community. But honestly, if it doesn't, the maintainer you're running into is probably an ass and not worth bothering with anyway. This is what doing things in the open is all about - <a href="https://www.gnu.org/philosophy/free-sw.html">freedom 1</a>, after all, is "the freedom to study the source code and make changes", the operative word being "study". The fact that knowledge is shared out in the open with anyone who wants it is one of the most amazing parts of this community, and I want to encourage you to stay curious and ask lots of questions.</p>
<p>So if you've ever walked away from a Pull Request review feeling like something wasn't quite right, consider this your permission slip to politely <em>tell your reviewer you think they're wrong</em>[1] - just make sure to be polite and explain why you think so! And remember, whatever they say, they're not criticizing you personally. I hope you embrace it as an opportunity to grow.</p>
<p>Footnotes:</p>
<p>[1]: Phrasing this as "I think you're wrong" instead of "you're wrong" is great for a lot of reasons, but one notable and less obvious one is that if the maintainer <em>does</em> end up being right, you won't feel silly.</p>
<p><em>Edited to clarify that I'm not advocating inpoliteness, to change the phrasing to "I</em> think <em>you're wrong", and to add some nice framing around a chance to collaborate on a difficult problem. Thanks to the Recurse Center folks whose feedback turned into these changes, particularly <a href="https://www.harihareswara.net/">Sumana Harihareswara</a> and <a href="https://jvns.ca/">Julia Evans</a>.</em></p>
]]></description><link>https://strugee.net/blog/2018/01/tell-your-pr-reviewers-theyre-wrong</link><guid isPermaLink="true">https://strugee.net/blog/2018/01/tell-your-pr-reviewers-theyre-wrong</guid><category><![CDATA[tips]]></category><category><![CDATA[culture]]></category><category><![CDATA[blaggregator]]></category><pubDate>Mon, 08 Jan 2018 03:04:55 GMT</pubDate></item><item><title><![CDATA[pump.io 5.1 stable published to npm]]></title><description><![CDATA[<p>Last night I officially published pump.io 5.1 to npm as a stable release!</p>
<p>As I wrote in the beta announcement, this release contains a variety of improvements:</p>
<ul>
<li><a href="https://strugee.net/blog/2017/08/zero-downtime-restarts-have-landed">Zero-downtime restarts</a>, which allows administrators to seamlessly roll over to new configurations and codebases</li>
<li>The daemon now generates startup log warnings on bad configurations, including insecure <code>secret</code> values and internal parameters</li>
<li>An official <code>Dockerfile</code> is now included with the release</li>
<li>The logged-out mobile homepage's menu icon is no longer incorrectly styled as black</li>
<li>An authorization problem with SockJS connections has been fixed</li>
</ul>
<p>5.1 stable <em>does</em> include one change the beta didn't: a bump to the version of the <code>gm</code> npm package which we depend on. This bump was done as a precautionary measure, as previous versions of <code>gm</code> depended on a version of the <code>debug</code> module which was vulnerable to denial-of-service security bugs.</p>
<p>As a project, we addressed these bugs <a href="https://strugee.net/blog/2017/10/denial-of-service-security-fixes-now-available">back in October</a> when we issued security releases for all supported release branches, and at the time we confirmed that the vulnerable function wasn't used by <code>gm</code>. Today's <code>gm</code> bump does <em>not</em> constitute a security release; instead, we're just bumping the version as a precautionary measure in case we missed something in October's assessment of the situation.</p>
<p>Aside from the <code>gm</code> bump, there are (as usual) miscellaneous version bumps included in this release. We've also started tracking test suite coverage information as well as overhauled our <a href="https://pumpio.readthedocs.io/">documentation on ReadTheDocs</a>, moving most of the in-repository documentation there.</p>
<p>If you want even more details of this release, you can also check out <a href="https://github.com/pump-io/pump.io/blob/master/CHANGELOG.md#510---2018-01-05">the changelog</a>.</p>
<p>pump 5.1 is a drop-in replacement for 5.0. That means if you're using our recommended installation method and installing from npm, you can upgrade with <code>npm install -g pump.io@5.1</code>. If you have a source-based install, you should merge and/or switch to the <code>v5.1.0</code> tag. And as always, if you encounter any problems, please feel free to reach out to the <a href="https://github.com/pump-io/pump.io/wiki/Community">community</a> or <a href="https://github.com/pump-io/pump.io/issues">file bugs you find</a>.</p>
<p>Finally, I would be remiss if I didn't point out that pump.io has a <strong>brand-new announcement mailing list</strong>! While the blog is great for announcing new releases, not everyone finds it convenient to check. Also, if we issue new betas in the middle of a release cycle, these aren't typically announced on the blog. Therefore in the future <em>all</em> new releases will be announced on the mailing list, not just initial betas. If you want to subscribe to the mailing list, you may do so <a href="https://lists.strugee.net/mailman/listinfo/pumpio-announce">here</a> - you'll get announcements of new features only, not e.g. feature announcements as seen on this blog. I hope people find this service useful!</p>
]]></description><link>https://strugee.net/blog/2018/01/pump.io-5.1-stable-published-to-npm</link><guid isPermaLink="true">https://strugee.net/blog/2018/01/pump.io-5.1-stable-published-to-npm</guid><category><![CDATA[pump.io]]></category><category><![CDATA[development]]></category><category><![CDATA[releases]]></category><category><![CDATA[blaggregator]]></category><pubDate>Sat, 06 Jan 2018 04:09:43 GMT</pubDate></item><item><title><![CDATA[Announcing lazymention: elegant outbound Webmention for static sites]]></title><description><![CDATA[<p>Last night I hit publish on version 1.0.0 of a new project, <a href="https://github.com/strugee/lazymention">lazymention</a>! Whoohoo!</p>
<p>tl;dr: lazymention exists to add Webmention support to static sites!</p>
<p>To elaborate a little bit, I developed lazymention because I had a problem with this site: I wanted to send outbound <a href="https://indieweb.org/Webmention">Webmentions</a> when I link to things, but my website is completely static. (Webmention, in case you didn't know, is a way to notify another website that you linked to them, so the other website can display some UI about your reply or whatever.) The page builds happen on my local machine, not on the server. One option would be to just send Webmentions from my local machine too, but this isn't really a good solution for a couple reasons. First, I couldn't do it automatically at build-time because the built pages wouldn't have been deployed to the server yet, so receivers of my Webmentions would reject the mentions due to the source being nonexistant. That meant that I would have to have a separate step, which wouldn't really be <em>that</em> big of a deal (lazymention reqires pinging a server too) except for the second reason: I would need some way to keep track of where I'd already sent Webmentions to, and that would require synchronizing across computers. Probably the only decent way to do that would be to check it into Git, but having a program's data store checked in right next to the source code just feels kinda ugly. Plus, then it can't be shared with other people as a service.</p>
<p>So instead of doing it locally, I elected to build a server instead. Here's how it works: you mark up your stuff with <a href="https://indieweb.org/h-feed"><code>h-feed</code></a> and <a href="https://indieweb.org/h-entry"><code>h-entry</code></a>, and whenever anything happens (e.g. you publish a new blog post or whatever), you ping lazymention with the URL (either the feed or the post itself). lazymention will use your microformats2 markup to find the canonical location for a given post, then it will find all the links in the post and send Webmentions for them. And presto! You've just sent Webmentions for your blog. lazymention also records when it's sent mentions, so if you ping it again, nothing will happen unless you've updated your content. I'm also planning to add <a href="https://indieweb.org/WebSub">WebSub</a> support to lazymention, too, and that'll work in the exact same way.</p>
<p>lazymention is super easy to get started with, especially because I've provided thorough documentation in the <a href="https://github.com/strugee/lazymention/blob/master/README.md">README</a>. If you find anything that's confusing or missing, please let me know by <a href="https://github.com/strugee/lazymention/issues/new">filing an issue</a>! I'd love to get it fixed. In fact, I'd be thrilled to hear about both positive <em>and</em> negative installation experiences.</p>
<p>Oh, and one more thing - lazymention is reusable in other applications. If you're writing a Node.js app and want to reuse its HTTP API, you can use its embedding API to get at the Express application and <code>Router</code> used internally. I'm not sure if people will actually find this useful, but I wrote it just for kicks anyway. See <a href="https://github.com/strugee/lazymention/blob/master/README.md#embedding">the embedding documentation</a> for more!</p>
<p>Cheers, and happy mentioning! Elegant outbound Webmention for static sites is here.</p>
]]></description><link>https://strugee.net/blog/2017/12/announcing-lazymention-elegant-outbound-webmention-for-static-sites</link><guid isPermaLink="true">https://strugee.net/blog/2017/12/announcing-lazymention-elegant-outbound-webmention-for-static-sites</guid><category><![CDATA[development]]></category><category><![CDATA[indieweb]]></category><category><![CDATA[releases]]></category><category><![CDATA[blaggregator]]></category><pubDate>Fri, 29 Dec 2017 18:52:04 GMT</pubDate></item><item><title><![CDATA[Shell script is one of the purest forms of human expression]]></title><description><![CDATA[<p>While I was at the <a href="https://www.recurse.com/">Recurse Center</a>, I came up with an interesting theory, and today I thought I'd finally formally write about it on my blog. Here it is: shell script is one of the purest forms of human expression, at least as far as technology is concerned.</p>
<p>Why? Well, shell script is this weird mix of actual programming language things and macro expansions, and even the programming things tend to be... odd, to put it politely. As a trivial example, did you know that this:</p>
<pre><code>$ echo {1..10}
</code></pre>
<p>results in this output:</p>
<pre><code>1 2 3 4 5 6 7 8 9 10
</code></pre>
<p>Shell scripts[1] know how to expand number sequences; it's just built-in to them. Variables work with substitution too, and you can even build commands with them:</p>
<pre><code>PAGER=less
$PAGER longfile.txt
</code></pre>
<p>The key thing to note here is that the second line is replacing <code>$PAGER</code> with the literal text <code>less</code>, and then running the resulting command line. The "variable access" is basically just an inline macro expansion, and the shell doesn't really handle it very intelligently. (This is also why you often need to quote variables when you access them - if they have whitespace in them, the shell will interpret the variable as more than one word.)</p>
<p>Or take the type system of the shell: it has none[2]. For example, what does <code>0</code> mean? It could represent any one of these things:</p>
<ol>
<li>The number 0</li>
<li>The string "0"</li>
<li>A binary we're invoking (well, trying to invoke) called <code>0</code></li>
<li>An argument to a binary</li>
<li>File descriptor 0 (stdin)</li>
<li>A file named <code>0</code></li>
</ol>
<p>All of these things combine to make the shell incredibly flexible and powerful - you can often express a <em>lot</em> in shell script with very little characters by writing "macros" in the right way.</p>
<p>It's also what makes shell such a god-awful programming language.</p>
<p>Think about it - as programmers, much of what we do seeks to impose order on our systems. We lint our code and run it through style checkers. I personally like to turn up my linter settings to maximum. And we use the concept of types to help organize our code - sure, there's disagreement on how <em>much</em> order types should impose, but we all pretty much agree that there should be <em>some</em> concept of types and type safety. Hell, for the languages whose type systems are basically "wtf are types", we make tools to impose additional safety on top of that - take <a href="http://www.typescriptlang.org/">TypeScript</a> and <a href="https://flow.org/">Flow</a>, for example. We also love to (hate to) write tests to ensure that our code fulfills some interface or behavior contract. (Even the idea of an interface seeks to organize and compartmentalize complexity in the system.)</p>
<p>Humans are inherently messy. We're scatterbrained and easily distracted, and our thoughts (or at least, my thoughts) tend to jump all over the place. Shell script is an amazing way to express your ideas because it lets you get directly to the goal so quickly, in a way that matches that messiness that defines us as a species. But since so much of our work as programmers is about trying to counteract our messiness, shell script is a <em>terrible</em> way to write real programs, for the exact. Same. Reason.</p>
<p>Footnotes:</p>
<p> [1]: Those written in <code>bash</code>, at least.</p>
<p> [2]: Note that this is different from having a type system of "wtf are types?? <a href="https://www.destroyallsoftware.com/talks/wat">wat</a>" - JavaScript is a good example of a language with such a type system, as is (to my understanding) PHP. The shell, on the other hand, has no type system <em>at all</em>.</p>
]]></description><link>https://strugee.net/blog/2017/12/shell-script-is-one-of-the-purest-forms-of-human-expression</link><guid isPermaLink="true">https://strugee.net/blog/2017/12/shell-script-is-one-of-the-purest-forms-of-human-expression</guid><category><![CDATA[musings]]></category><category><![CDATA[blaggregator]]></category><pubDate>Thu, 28 Dec 2017 00:08:20 GMT</pubDate></item><item><title><![CDATA[Winter break priorities, 2017-18]]></title><description><![CDATA[<p>So I just wanted to write something up real fast to document my development priorities over my upcoming winter break (which starts tomorrow, whoohoo!). This is just generally useful to have, because I'm forgetful, but will also help keep me accountable since the list is public.</p>
<p>So, here are the projects I want to get done, in rough order of priority:</p>
<ol>
<li>Polish up an <a href="https://github.com/nodejs/node/pull/14164#issuecomment-325553163">outstanding Node.js Pull Request</a> that automatically generates manpages for every module shipped with Node core</li>
<li>Deal with GPG key signing which I have been procrasinating on for, well, years now</li>
<li>Push some Debian packaging work forward (I've done some work to get the <a href="https://tracker.debian.org/pkg/profanity">Profanity packaging</a> up-to-date, and I want to get <a href="https://github.com/strugee/filter-other-days">filter-other-days</a> into Debian as well)</li>
<li>Finish up v1 of <a href="https://github.com/strugee/lazymention">lazymention</a> - high-priority since it's so close to being done!</li>
<li>Finally push through and implement <a href="https://github.com/pump-io/pump.io/issues/1241">ActivityPub in pump.io core</a></li>
<li>Clear <a href="https://github.com/pump-io/pump.io/pulls">the backlog of PRs</a> sent to pump.io</li>
</ol>
<p>I also am setting a goal of writing at least two blog posts per week, and I want to try to get some editing done on a paper I'm planning to try to get published (though I'm not sure if I'll end up doing this, honestly).</p>
<p>That seems like a lot, honestly, and yet I feel like I must have missed something - I will update this list if I think of anything else!</p>
<p>Cheers, and happy holidays everyone! \o/</p>
]]></description><link>https://strugee.net/blog/2017/12/winter-break-priorities-2017-18</link><guid isPermaLink="true">https://strugee.net/blog/2017/12/winter-break-priorities-2017-18</guid><category><![CDATA[personal]]></category><category><![CDATA[blaggregator]]></category><pubDate>Wed, 20 Dec 2017 17:44:18 GMT</pubDate></item><item><title><![CDATA[pump.io 5.1 is in beta]]></title><description><![CDATA[<p>I'm really excited to announce that pump.io 5.1 is officially in beta!</p>
<p>This release makes a wide array of improvements. One of the features I'm most excited about is <a href="http://pump.io/blog/2017/08/zero-downtime-restarts-have-landed">zero-downtime restarts</a>, which will allow administrators to gracefully roll over to new configurations and codebases with absolutely no user-visible impact! Aside from that, here's a list of highlights:</p>
<ul>
<li>The daemon now generates startup log warnings on bad configurations, including insecure <code>secret</code> values and internal parameters</li>
<li>An official <code>Dockerfile</code> is now included with the release</li>
<li>The logged-out mobile homepage's menu icon is no longer incorrectly styled as black</li>
<li>SockJS connections no longer fail due to authorization problems</li>
</ul>
<p>As usual, this release also includes some small updates to dependencies. Plus, we started tracking how much code our test suite covers! We've also significantly cleaned up the documentation and moved almost all of the in-repository documentation to ReadTheDocs, where it's a lot more organized and accessible. If you want more than just these highlights, you can check out <a href="https://github.com/pump-io/pump.io/blob/master/CHANGELOG.md#510-beta-0---2017-12-08">the changelog</a>.</p>
<p>Note that while the repository includes a <code>Dockerfile</code> now, we have not yet begun publishing on Docker Hub due to some security logistics that need to be figured out - when we do, it'll be announced in all the usual places (including this blog).</p>
<p>I'm so excited for people to try out this release. 5.1 beta 0 is a drop-in replacement for 5.0, so if you're on 5.0 and want to live (more) on the bleeding edge, you can upgrade with <code>npm install -g pump.io@5.1</code> if you have an npm-based install. If you have a source-based install, you should merge and/or switch to the <code>v5.1.0-beta.0</code> tag. And as always, if you encounter any problems you can reach out to the <a href="https://github.com/pump-io/pump.io/wiki/Community">community</a> or <a href="https://github.com/pump-io/pump.io/issues">file bugs you find</a>.</p>
]]></description><link>https://strugee.net/blog/2017/12/pump.io-5.1-is-in-beta</link><guid isPermaLink="true">https://strugee.net/blog/2017/12/pump.io-5.1-is-in-beta</guid><category><![CDATA[pump.io]]></category><category><![CDATA[releases]]></category><category><![CDATA[blaggregator]]></category><pubDate>Fri, 08 Dec 2017 20:24:57 GMT</pubDate></item><item><title><![CDATA[Webmention test post]]></title><description><![CDATA[<p>Once again I need to test whether <a href="https://github.com/strugee/lazymention">lazymention</a> - and more importantly, the underlying libraries (<a href="https://github.com/strugee/node-send-webmention">node-send-webmention</a> and <a href="https://github.com/strugee/node-get-webmention-url">node-get-webmention-url</a>) - complies with the <a href="https://www.w3.org/TR/webmention/">W3C spec</a>. I'll be using <a href="https://webmention.rocks/">webmention.rocks</a>, so, here's a large list of links:</p>
<p><a href="https://webmention.rocks/test/1">Test 1</a>, <a href="https://webmention.rocks/test/2">Test 2</a>, <a href="https://webmention.rocks/test/3">Test 3</a>, <a href="https://webmention.rocks/test/4">Test 4</a>, <a href="https://webmention.rocks/test/5">Test 5</a>, <a href="https://webmention.rocks/test/6">Test 6</a>, <a href="https://webmention.rocks/test/7">Test 7</a>, <a href="https://webmention.rocks/test/8">Test 8</a>, <a href="https://webmention.rocks/test/9">Test 9</a>, <a href="https://webmention.rocks/test/10">Test 10</a>, <a href="https://webmention.rocks/test/11">Test 11</a>, <a href="https://webmention.rocks/test/12">Test 12</a>, <a href="https://webmention.rocks/test/13">Test 13</a>, <a href="https://webmention.rocks/test/14">Test 14</a>, <a href="https://webmention.rocks/test/15">Test 15</a>, <a href="https://webmention.rocks/test/16">Test 16</a>, <a href="https://webmention.rocks/test/17">Test 17</a>, <a href="https://webmention.rocks/test/18">Test 18</a>, <a href="https://webmention.rocks/test/19">Test 19</a>, <a href="https://webmention.rocks/test/20">Test 20</a>, <a href="https://webmention.rocks/test/21">Test 21</a>, <a href="https://webmention.rocks/test/22">Test 22</a>, <a href="https://webmention.rocks/test/23/page">Test 23</a></p>
<p>Hopefully it works \o/</p>
]]></description><link>https://strugee.net/blog/2017/11/webmention-test-post</link><guid isPermaLink="true">https://strugee.net/blog/2017/11/webmention-test-post</guid><category><![CDATA[development]]></category><pubDate>Fri, 24 Nov 2017 20:24:46 GMT</pubDate></item><item><title><![CDATA[Not going to today's HWC San Francisco]]></title><description><![CDATA[<p>Testing whether my new Webmention implementation, <a href="https://github.com/strugee/lazymention">lazymention</a> (which will ship Real Soon Now™), will send a Webmention to note that I will <data class="p-rsvp" value="no">NOT be attending</data> today's <a href="http://tantek.com/2017/319/e1/homebrew-website-club" class="u-in-reply-to">Homebrew Website Club San Francisco</a>! Though let's be honest, I really want to.</p>
<p>(With &lt;3 for <a href="https://chat.indieweb.org/social/2017-11-15#t1510774596509000">Tantek</a>)</p>
]]></description><link>https://strugee.net/blog/2017/11/not-going-to-todays-hwc-san-fransisco-2017</link><guid isPermaLink="true">https://strugee.net/blog/2017/11/not-going-to-todays-hwc-san-fransisco-2017</guid><category><![CDATA[personal]]></category><pubDate>Wed, 15 Nov 2017 14:43:16 GMT</pubDate></item><item><title><![CDATA[filter-other-days is portable to FreeBSD]]></title><description><![CDATA[<p>I'm pleased to announce <code>filter-other-days</code> 1.0.1. This is a bugfix release primarily improving portability to other Unix-like operating systems; in particular, the test suite now fully passes under FreeBSD. Specifically:</p>
<ul>
<li>Various portability bugs in the test suite itself were fixed - the test suite no longer relies on a GNU <code>date</code> (with GNU <code>date -d</code> semantics) or a fully-functional <code>/dev/fd</code> (the fallback option is named pipes), and it doesn't hardcode bash's install path as <code>/bin/bash</code></li>
<li>Some non-portable uses of <code>echo "\n"</code> which break under BSD systems were replaced with <code>printf</code> invocations</li>
<li>Travis CI now checks <code>filter-other-days</code> with Debian's <code>checkbashisms</code> script, which is run in strict mode</li>
<li>Non-portable uses of <code>test</code>'s <code>-o</code> option were caught by <code>checkbashisms</code> and replaced with <code>||</code></li>
</ul>
<p>With these changes I expect that <code>filter-other-days</code> will probably run on all major BSD distributions. I intend to confirm this hypothesis soon and have filed bugs for <a href="https://github.com/strugee/filter-other-days/issues/12">OpenBSD</a> and <a href="https://github.com/strugee/filter-other-days/issues/13">NetBSD</a>, plus <a href="https://github.com/strugee/filter-other-days/issues/14">illumos</a> just for kicks.</p>
<p>As with 1.0.0, you can clone <code>filter-other-days</code> <a href="https://github.com/strugee/filter-other-days">from GitHub</a> or you can download a (signed) <a href="https://github.com/strugee/filter-other-days/releases/tag/v1.0.1">tarball</a>. Please do <a href="https://github.com/strugee/filter-other-days/issues/new">report any bugs</a> you find in the release.</p>
<p>Enjoy!</p>
]]></description><link>https://strugee.net/blog/2017/11/filter-other-days-is-portable-to-freebsd</link><guid isPermaLink="true">https://strugee.net/blog/2017/11/filter-other-days-is-portable-to-freebsd</guid><category><![CDATA[development]]></category><category><![CDATA[releases]]></category><category><![CDATA[sysadmin]]></category><category><![CDATA[blaggregator]]></category><pubDate>Wed, 01 Nov 2017 20:39:53 GMT</pubDate></item><item><title><![CDATA[filter-other-days: Artificial Ignorance-compatible logfile date filtering]]></title><description><![CDATA[<p>I've just published version 1.0 of my latest project, <code>filter-other-days</code> - a shell script to filter logfiles for today's date in an Artificial Ignorance-compatible way.</p>
<p>If you haven't heard of <a href="http://www.ranum.com/security/computer_security/papers/ai/index.html">Artificial Ignorance</a>, it's something you should look into cause it's pretty awesome. Here's the tl;dr: it doesn't make sense to look for all the "interesting" things  in logfiles, because it's not actually possible to enumerate all the failure conditions of a system. So instead what we do is <em>throw away</em> entries that we're <em>sure</em> are just routine. Since we've gotten rid of all the uninteresting entries, whatever is left has to be interesting.</p>
<p>I find this pretty compelling, and decided to start implementing it on my Tor relay. I quickly realized that my ideal workflow would be to configure cron to send me email with a daily report of interesting log entries. However, this presented a problem: how to get just today's log entries? I wanted to be able to handle all logfiles at once instead of receiving different reports for different logs, so I had to be able to parse all logfiles in the same way. My relay runs on FreeBSD, so the logs are unstructured text files, and even worse, several daemons (like Tor itself) write timestamps in a different format - this makes parsing all logfiles at once super difficult because I couldn't just trivially <code>grep</code> for today's date since that would end up dropping legitimate entries from logfiles that formatted their timestamps differently.</p>
<p>I briefly considered trying to write a regex to match all sorts of different timestamp formats, but quickly rejected this idea as too fragile. There are a lot of moving parts in a modern operating system - what if e.g. a daemon changed its defaults about how to format timestamps? Or, more likely, what if I simply missed a particular format present in my logs? Then I'd be accidentally throwing away an entire logfile. To solve this problem, I decided to apply the same idea behind Artificial Ignorance - if I couldn't reliably, 100% match log entries from today's date, I could do the next best thing and attempt to discard all entries from <em>other</em> dates. In this case the worst that could happen is me recieving irrelevant information, and I'd be basically guaranteed to never miss an legitimate entry from today.</p>
<p><code>filter-other-days</code> is a working implementation of this design. Originally I put it with the other random scripts I keep with my <a href="https://github.com/strugee/dots/tree/master/bin">dotfiles</a>, but it quickly became obvious that it was useful as a standalone project. So I <a href="https://github.com/strugee/dots/commit/7dd7e2755c55194cdff1c7b24b24bca72581e346">extracted</a> it into its own repository, which now lives <a href="https://github.com/strugee/filter-other-days">on GitHub</a>. From there I continued to improve the script while adding a test suite and writing extensive documentation (including a Unix manpage - I always feel like a wizardly hacker when writing those things). This took, by my estimation, somewhere between 10 and 15 hours because this is actually a shockingly non-trivial problem, but mostly because regexes are hard.</p>
<p>But today I finally finished! So I'm super excited to announce that version 1.0 of <code>filter-other-days</code> is now available. You can either clone it from GitHub or download a <a href="https://github.com/strugee/filter-other-days/releases/tag/v1.0.0">tarball</a> (and the accompanying signature, if you want). It works pretty well already, but I have some ideas for future directions the project could go:</p>
<ol>
<li>Logic allowing you to actually specify the date you want to filter for, instead of assuming it's today (though you actually can already get this behavior using <code>faketime</code>; that's what the test suite does)</li>
<li>Removal of the dependency on GNU <code>seq</code> - this is, to my knowledge, the only non-POSIX requirement of <code>filter-other-days</code></li>
<li>Debian package, maybe?</li>
<li>More log formats (please <a href="https://github.com/strugee/filter-other-days/issues">report bugs</a> if you have formats <code>filter-other-days</code> doesn't recognize - which you probably do!)</li>
</ol>
<p>If you find this project useful, let me know! I'd love to hear about how people are using it. Or if it breaks (or doesn't fill your usecases), please <a href="https://github.com/strugee/filter-other-days/issues">report bugs</a> or send patches - I love those, too! Either way, may the logs be with you!</p>
]]></description><link>https://strugee.net/blog/2017/10/announcing-filter-other-days</link><guid isPermaLink="true">https://strugee.net/blog/2017/10/announcing-filter-other-days</guid><category><![CDATA[development]]></category><category><![CDATA[security]]></category><category><![CDATA[sysadmin]]></category><category><![CDATA[releases]]></category><category><![CDATA[blaggregator]]></category><pubDate>Fri, 20 Oct 2017 19:19:51 GMT</pubDate></item><item><title><![CDATA[pump.io denial-of-service security fixes now available]]></title><description><![CDATA[<p>Recently some denial-of-service vulnerabilities were discovered in various modules that pump.io indirectly depends on. I've bumped Express and <code>send</code> to pull in patched versions, and I've updated our fork of <code>connect-auth</code> to require a patched version of Connect, too. The remaining vulnerabilities I've confirmed don't affect us.</p>
<p>Because of these version bumps, I've just put out security releases which all administrators are encouraged to upgrade to as soon as possible. A semver-major release (5.0.0) was released within the past 6 months so per our <a href="https://github.com/pump-io/pump.io/wiki/Security">security support policy</a> this means there are three new releases:</p>
<ol>
<li>pump.io 5.0.2 replaces 5.0.0 and is available now on npm</li>
<li>pump.io 4.1.3 replaces 4.1.2 and is available now on npm</li>
<li>pump.io 4.0.2 will replace 4.0.1 <strike>and is currently undergoing automated testing (it'll be on npm shortly)</strike> <strong>Update:</strong> pump.io 4.0.2 is now on npm</li>
</ol>
<p>As these are security releases we encourage admins to upgrade as soon as possible. If you're on 5.0.0 installed via npm - our recommended configuration - you can upgrade by issuing:</p>
<pre><code>$ npm install -g pump.io@5
</code></pre>
<p>If you're on 4.1.3, you can upgrade by issuing:</p>
<pre><code>$ npm install -g pump.io@4
</code></pre>
<p>And when 4.0.2 is out, if you're on 4.0.1 you can upgrade by issuing:</p>
<pre><code>$ npm install -g pump.io@4.0
</code></pre>
<p>Note though that 4.1.3 is a drop-in replacement for 4.0.2, so you should consider just upgrading to that instead. Or even better, <a href="https://pumpio.readthedocs.io/en/latest/upgrades/4.x-to-5.x.html">upgrade to 5.x</a>!</p>
<p>If you don't have an npm-based install, you'll have to upgrade however you normally do. How to do this will depend on your particular setup.</p>
<p>As always, if you need help, you should get in touch with <a href="https://github.com/pump-io/pump.io/wiki/Community">the community</a>. I'd also like to specifically thank <a href="https://identi.ca/jxself">Jason Self</a>, who generously deployed a 24-hour private beta of these fixes on <a href="https://datamost.com/">Datamost</a>. One of the version bumps was ever-so-slightly risky, and being able to test things in production before rolling out patches for the entire network was invaluable. I wouldn't be as confident as I am in these releases without his help. So thanks, Jason - I really appreciate it!</p>
]]></description><link>https://strugee.net/blog/2017/10/denial-of-service-security-fixes-now-available</link><guid isPermaLink="true">https://strugee.net/blog/2017/10/denial-of-service-security-fixes-now-available</guid><category><![CDATA[pump.io]]></category><category><![CDATA[development]]></category><category><![CDATA[security]]></category><category><![CDATA[releases]]></category><category><![CDATA[blaggregator]]></category><pubDate>Sun, 01 Oct 2017 17:40:59 GMT</pubDate></item><item><title><![CDATA[Zero-downtime restarts have landed]]></title><description><![CDATA[<p>I'm thrilled to announce that zero-downtime restarts, which I've been hacking on for the past week or two, <a href="https://github.com/pump-io/pump.io/pull/1406">have just landed</a> in pump.io master!</p>
<p>Zero-downtime restarts require at least two cluster workers and MongoDB as a Databank driver (we'll eventually relax the latter requirement as we continue to test the feature). Here's how it works:</p>
<ol>
<li>An administrator sends SIGUSR2 to the master pump.io process (note that SIGUSR1 is <a href="https://nodejs.org/api/process.html#process_signal_events">reserved by Node.js</a>)</li>
<li>The master process builds a queue of worker processes that need to be restarted</li>
<li>The master process picks a random worker from the queue and sends it a signal asking it to gracefully shut down</li>
<li>The worker process shuts down its HTTP server, which causes it to stop accepting new connections - it will do the same for the bounce server, if applicable</li>
<li>The worker shuts down its database connection once the HTTP server is completely shut down, meaning that it's done servicing in-flight requests</li>
<li>The worker closes its connection with the master process and Node.js automatically terminates due to there being no listeners on the event loop</li>
<li>The master recognizes the death of the worker process, replaces it, waits for the new worker to signal that it's listening for connections, and repeats from step 3 until the queue is empty</li>
</ol>
<p>This works because only one worker is shut down at a time, allowing the other workers to continue servicing requests while the one worker is restarted. We wait until the new worker actually signals it's ready to process requests before beginning the process for another worker.</p>
<p>Such a feature requires careful error handling, so there are a lot of built-in checks to prevent administrators from shooting themselves in the foot:</p>
<ul>
<li>If there's a restart already in progress, SIGUSR2 is ignored</li>
<li>If there's only 1 cluster worker, the restart request is refused (because there would be downtime and you should just restart the master)</li>
<li>
<p>The master process will load a magic number from the <em>new</em> code and compare it with the <em>old</em> magic number loaded when the master process started - if they don't match, SIGUSR2 will be refused. This number will be incremented for things that would make zero-downtime restarts cause problems, for example:</p>
<ul>
<li>The logic in the master process itself changing</li>
<li>Cross-process logic changing, such that a new worker communicating with old workers would cause problems</li>
<li>Database changes</li>
</ul>
</li>
<li>If a worker process doesn't shut itself down within 30 seconds, it will be killed</li>
<li>
<p>If a zero-downtime restart fails for any reason, the master process will refuse SIGUSR2 and will not respawn any more cluster workers, even if they crash - this is because something must have gone <em>seriously</em> wrong, either with the master, the workers, or the new code, and it's better to just restart everything. Currently this condition occurs when:</p>
<ul>
<li>A new worker died directly after being spawned (e.g. from invalid JSON in <code>pump.io.json</code>)</li>
<li>A new worker signaled that it couldn't bind to the appropriate ports</li>
</ul>
</li>
</ul>
<p>While these checks do a lot to catch problems, they're not a silver bullet, and we strongly recommend that administrators watch their logs as they trigger restarts. However, this is still a <em>huge</em> win for the admin experience - the most exciting part of this for me is that it's the first step we need to take towards having fully automatic updates, which has been a dream of mine for a long while now.</p>
<p>Admins running from git master can start experimenting with this feature today, and it will be released during the <em>next</em> release cycle - i.e. with the 5.1 beta and stable, <em>not</em> the current 5.0 beta. Since this is highly experimental, we want this to have as much time for testing as possible. You can also check out the <a href="https://pumpio.readthedocs.io/en/latest/administration/zero-downtime-restarts.html">official documentation</a> on this feature.</p>
<p>I hope people enjoy this! And as always, feel free to <a href="https://github.com/pump-io/pump.io/issues/new">report any bugs</a>.</p>
]]></description><link>https://strugee.net/blog/2017/08/zero-downtime-restarts-have-landed</link><guid isPermaLink="true">https://strugee.net/blog/2017/08/zero-downtime-restarts-have-landed</guid><category><![CDATA[pump.io]]></category><category><![CDATA[blaggregator]]></category><pubDate>Fri, 18 Aug 2017 02:01:16 GMT</pubDate></item><item><title><![CDATA[pump.io 5.0 beta released]]></title><description><![CDATA[<p>I'm excited to announce that pump.io 5.0.0 is now officially in beta!</p>
<p>This is another big release and makes a wide variety of improvements. Here are some highlights from <a href="https://github.com/pump-io/pump.io/blob/master/CHANGELOG.md#500-beta-0---2017-08-07">the changelog</a>:</p>
<ul>
<li>More complete documentation</li>
<li>Small improvements to the administrator experience</li>
<li>A better web UI, including some user experience polishing as well as an upgrade to more performant and better-licensed libraries</li>
<li>A fix for crashes related to "login with remote account" (although this one was backported in 4.1.1)</li>
<li>Significant security improvements in the <a href="https://pumpio.readthedocs.io/en/latest/administration/upstream-systemd-unit.html">systemd service</a> shipped with the package</li>
<li>Lots of internal refactoring and simplification made possible by dropping Node 0.10/0.12 support</li>
</ul>
<p>Many of these changes - particularly the systemd changes and the fact that (<a href="http://pump.io/blog/2017/07/pump.io-4.1-is-out">as previously announced</a>) Node 0.10 and 0.12 are no longer supported - will require administrator intervention. Be sure to read our <a href="https://pumpio.readthedocs.io/en/latest/upgrades/4.x-to-5.x.html">upgrade guide</a> for details on how to deal with these changes.</p>
<p>All of these features add up to make pump.io 5.0 beta the most stable and secure release yet. As always, it will go through our beta period for about a month before being released as a fully stable version. If you try it out, the <a href="https://github.com/pump-io/pump.io/wiki/Community">community</a> would love to hear about it - and be sure to <a href="https://github.com/pump-io/pump.io/issues">report any bugs</a> you encounter!</p>
]]></description><link>https://strugee.net/blog/2017/08/pump.io-5.0-beta-released</link><guid isPermaLink="true">https://strugee.net/blog/2017/08/pump.io-5.0-beta-released</guid><category><![CDATA[pump.io]]></category><category><![CDATA[releases]]></category><category><![CDATA[blaggregator]]></category><pubDate>Mon, 07 Aug 2017 14:51:12 GMT</pubDate></item><item><title><![CDATA[Going to IndieWeb Summit 2017]]></title><description><![CDATA[<p>I'll be <data class="p-rsvp" value="yes">attending</data> the <a href="https://2017.indieweb.org/" class="u-in-reply-to">IndieWeb Summit</a> this year (well, the first day). Hopefully I'll write a way to actually post notes and RSVPs properly on this site, instead of sketchily writing the HTML by hand, which is what I did for this RSVP.</p>
]]></description><link>https://strugee.net/blog/2017/06/going-to-indieweb-summit-2017</link><guid isPermaLink="true">https://strugee.net/blog/2017/06/going-to-indieweb-summit-2017</guid><category><![CDATA[personal]]></category><pubDate>Tue, 13 Jun 2017 02:09:13 GMT</pubDate></item></channel></rss>