<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[strugee.net blog - May - 2016]]></title><description><![CDATA[strugee.net blog - May - 2016]]></description><link>https://strugee.net/blog/2016/05</link><generator>stratic-indexes-to-rss</generator><lastBuildDate>Tue, 22 May 2018 03:32:32 GMT</lastBuildDate><atom:link href="https://strugee.net/blog/2016/05/index.rss" rel="self" type="application/rss+xml"/><copyright><![CDATA[© Copyright 2012-2018 AJ Jordan. Available under the GNU Affero GPL.]]></copyright><webMaster><![CDATA[AJ Jordan <alex@strugee.net>]]></webMaster><item><title><![CDATA[Stratic part one is done!]]></title><description><![CDATA[<p>Whooooooooooo!</p>
<p>I am so, so, <em>so</em> thrilled to announce that the first part of <a href="https://github.com/strugee/generator-stratic">Stratic</a> is complete! And you can see the result right here on strugee.net, since this blog post was generated with Stratic!</p>
<p><strong>tl;dr</strong>:</p>
<pre><code>var rename = require('gulp-rename');
var markdown = require('gulp-markdown');
var parse = require('stratic-parse-header');
var straticToJson = require('stratic-post-to-json-data');
var jadeTemplate = require('gulp-jade-template');
var dateInPath = require('stratic-date-in-path');

gulp.task('posts', function() {
    return gulp.src('src/blog/*.md')
               .pipe(parse())
               .pipe(markdown())
               .pipe(dateInPath())
               .pipe(straticToJson())
               .pipe(jadeTemplate('src/blog/post.jade'))
               .pipe(rename({ extname: '.html' }))
               .pipe(gulp.dest('dist/blog'));
});
</code></pre>
<p>How <em>gorgeous</em> is that?? Let me explain how it works. (I'll assume the reader is familiar with <a href="https://github.com/gulpjs/gulp">Gulp</a> and <a href="https://nodejs.org/en/">Node.js</a>.)</p>
<p>So the <code>gulp.src()</code> call is pretty obvious. We just read all the blog posts into the stream. Note, however, that <code>gulp.src()</code> doesn't stream text, per se - it streams <a href="https://github.com/gulpjs/vinyl">Vinyl</a> file objects. This will become important later.</p>
<p>Now, the first piece of custom Stratic code that we use is the <code>stratic-parse-header</code> module. This module takes a Markdown file with a standard Stratic header (see <a href="https://strugee.net/blog/2014/11/new-blog-new-site">my original announcement</a> for details), parses the header, strips it out, then returns the new, headerless Markdown. However, the new Vinyl file object has a couple of new properties from the parsing phase - specifically, <code>file.title</code>, <code>file.author</code>, <code>file.time</code>, and <code>file.categories</code> now exist. This is why the fact that Vinyl is used is important - now <em>any</em> Gulp plugin downstream from where <code>parse()</code> is run can use all of these values in whatever way it wants. (See <a href="https://github.com/strugee/stratic-parse-header/blob/master/README.md">the README</a> for more details.)</p>
<p>Now our Vinyl file object is <em>only</em> the content of the post, and it has additional Stratic metadata attached to it. Awesome! The next thing that we do is render the Markdown, just using a standard Gulp plugin for this. Easy breezy. After that, we pipe to the <code>stratic-date-in-path</code> module, which adds the year and month to paths. For example, without <code>stratic-date-in-path</code>, this blog post would be at <code>https://strugee.net/blog/stratic-part-one</code>. However, since I <em>do</em> use <code>stratic-date-in-path</code>, the post lives at <code>https://strugee.net/blog/2016/05/stratic-part-one</code> instead. Nice, right? Eventually I'll write code to generate pretty indexes for each year and month - that's what Stratic part 2 is for.</p>
<p>The next thing we do is pipe to the <code>stratic-post-to-json-data</code> module. This module is specifically designed to work with the <code>gulp-jade-template</code> module, which expects the file contents to be some JSON that will be given as data to a <a href="http://jade-lang.com/">Jade</a> template, whose rendered HTML becomes the new file contents. What sets up that JSON? You guessed it - <code>stratic-post-to-json-data</code>. That's all it does. It just creates an object that contains the metadata and the actual post text, runs it through <code>JSON.stringify()</code>, and sets the file contents equal to the result. Just how <code>gulp-jade-template</code> likes it.</p>
<p>And with that, we've successfully rendered a blog post. Whooooooooooo! I'm so pumped about this software. The call to <code>rename()</code> is just a little housekeeping, and then we write the whole thing back to disk with <code>gulp.dest()</code>. Awesome.</p>
<p>It's worth noting that the real beauty in this code isn't what the code actually does, but the extreme modularity of the whole thing. Unlike projects like <a href="https://jekyllrb.com/">Jekyll</a> or even <a href="http://wintersmith.io/">Wintersmith</a>, this isn't a giant, monolithic framework. It's all standard Node and Gulp. Note how (for example) we didn't need a custom plugin for Markdown - we just used the standard <code>gulp-markdown</code>. Don't like Markdown? No problem. Write something to extract post metadata from your preferred format, replace <code>parse()</code> with that and <code>markdown()</code> with a different renderer, and you're golden. All the rest will continue to work the <em>exact</em> same - adding dates to paths, rendering the template, etc. - because everything's decoupled from everything else. Each component can be trivially swapped out and replaced with something new and better, and the rest of the system continues to work. Gorgeous.</p>
<p>I've got to go now, but I'm not done blogging. I'll be back soon to talk about the work going on in <a href="http://pump.io/">pump.io</a>, and I'll be back (much?) later to talk about Stratic part two (aka, pretty indexes).</p>
<p>Whooooooooooooooooooooo!</p>
]]></description><link>https://strugee.net/blog/2016/05/stratic-part-one</link><guid isPermaLink="true">https://strugee.net/blog/2016/05/stratic-part-one</guid><category><![CDATA[development]]></category><category><![CDATA[releases]]></category><category><![CDATA[stratic]]></category><pubDate>Sat, 28 May 2016 14:09:38 GMT</pubDate></item><item><title><![CDATA[Re: Bitcoin, Magical Thinking, and Political Ideology]]></title><description><![CDATA[<p><em>Editorial note: I published this almost three years ago on my Tumblr, which I keep semi-private and so don't want to link to. This is a verbatim repost from there, despite the fact that I disagree with some portions of this text nowadays.</em></p>
<h2><a href="https://al3x.net/2013/12/18/bitcoin.html">Bitcoin, Magical Thinking, and Political Ideology</a></h2>
<p><a href="http://edwardspoonhands.com/post/71550289177/bitcoin-magical-thinking-and-political-ideology">edwardspoonhands</a>:</p>
<blockquote>
<p>I get asked all the time what I think of BitCon…this guy says it better than I could.</p>
</blockquote>
<p>+1 for linking to something by Alex Payne. I love him.</p>
<p>About the actual content, at one point Alex says this:</p>
<blockquote>
<p>We’re told that Bitcoin “fixes serious problems with existing payment systems that depend on centralized services to verify the validity of transactions.” If by “fixes” you mean “ignores”, then yes: a Bitcoin transaction, like cash, comes with the certainty that a definite quantity of a store of value has changed hands, and little else. How this verifies any “validity” or cuts down on fraud I’m not sure; stolen Bitcoins are spent as easily as stolen cash, which is why <a href="http://www.cnbc.com/2013/11/20/more-bitcoins-more-problems-how-hackers-are-targeting-bitcoins.html">theft of Bitcoins has been rampant</a>.</p>
</blockquote>
<p>I think the concern isn’t with fraud or validity. The problem that Bitcoin solves is with the centralized banking model. The fundamental idea behind Bitcoin is that it cannot be centrally controlled or taken down, like the internet. It is impossible to flip a switch and “turn off” the Bitcoin network. It <em>is</em> possible to do that with a centralized bank: in that case, “flipping the switch” ends up being “shut down the bank”. Or, “drive the bank out of business”.</p>
<pre><code>If Bitcoin’s strength comes from decentralization, why pour millions into a single company? Ah, because Coinbase provides an “accessible interface to the Bitcoin protocol”, we’re told. We must centralize to decentralize, you see; such is the perverse logic of capital co-opting power. In order for Bitcoin to grow a thriving ecosystem, it apparently needs a US-based, VC-backed company that has “worked closely with banks and regulators to ensure that the service is safe and compliant”.
</code></pre>
<p>Maybe the problem isn’t with Bitcoin itself, but with what Coinbase is doing with the Bitcoin protocol. Now, to be clear, I think the Bitcoin to USD bridge aspect of Coinbase is OK. But I think that this paragraph is very, very true: it is <em>perverse</em> that we have centralized a decentralized protocol. Decentralized protocols tend to be very dangerous, IMHO, because of the tendency of users to just go with the most popular provider because it’s the easiest solution, and then effectively centralizing the network in the process.</p>
<p>Anyone remember XMPP? XMPP was supposed to be great. It was supposed to be the future of communications on the internet. But in practice, XMPP servers are unreliable. It’s hard to find one that works well. I don’t actually use XMPP a lot myself, but there are a lot of problems with connections, chat requests being undone (so you have to add a contact for a second time), etc. So what happened because of these problems (and the fact that everyone uses Gmail)? The most-used XMPP server is talk.google.com. At least it was, until Google replaced Google Talk with Google Hangouts, which uses a proprietary protocol with no XMPP bridge - and so the network got screwed over, because suddenly, a lot of people upgraded to Hangouts and cut themselves off from the XMPP network. The sad truth, though, is that it almost doesn’t matter. Take a survey of any random Google Talk user. I will bet you $100 that less than 1 out of 50 people who you talk to won’t know that Google Talk is based on XMPP, much less what XMPP is. And there’s almost zero chance that they understand why XMPP matters, or why federated protocols and networks matter.</p>
<p>I’m getting off track, though. So back to Bitcoin and Coinbase. I think what Coinbase is doing by hosting people’s Bitcoin wallets and transactions is fundamentally <em>wrong</em>, because I truly believe that it damages the Bitcoin ecosystem. The centralization in Coinbase is, IMHO, a major problem.</p>
<p>I wonder if this will be solved with a project like <a href="https://arkos.io/">arkOS</a>. I mean, maybe the solutionv that will ultimately happen is for people to spin up their own instances of a Coinbase-like Bitcoin wallet. I think it’s pretty clear that people, in general, like cloud apps better than desktop apps. Access from any computer is a really nice feature to have. Maybe projects like arkOS will help decentralized protocols like Bitcoin remain decentralized in practice.</p>
<p>Or maybe Bitcoin will effectively die, just like XMPP did. I mean, sure, XMPP is still a network. But no one really uses it consciously. Almost everyone who uses XMPP nowadays does so accidentally, through a service that just happens to have an XMPP bridge. Google Talk was a prime example of this, but it’s dead. Now, I’ll bet money that the most-used XMPP provider is Facebook. Never knew that Facebook Chat had an XMPP bridge? That’s because Facebook doesn’t advertise it; the only time it’s mentioned is in the developer docs. The mainstream does not care about the XMPP protocol, because we centralized it. What the mainstream <em>does</em> care about is the services that we centralized it on: Google and Facebook. And that’s a real problem.</p>
]]></description><link>https://strugee.net/blog/2016/05/re-bitcoin</link><guid isPermaLink="true">https://strugee.net/blog/2016/05/re-bitcoin</guid><category><![CDATA[musings]]></category><pubDate>Wed, 11 May 2016 10:18:00 GMT</pubDate></item></channel></rss>