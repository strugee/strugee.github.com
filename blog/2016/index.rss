<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[strugee.net blog - 2016]]></title><description><![CDATA[strugee.net blog - 2016]]></description><link>https://strugee.net/blog/2016</link><generator>stratic-indexes-to-rss</generator><lastBuildDate>Fri, 22 Mar 2019 05:04:31 GMT</lastBuildDate><atom:link href="https://strugee.net/blog/2016/index.rss" rel="self" type="application/rss+xml"/><copyright><![CDATA[© Copyright 2012-2018 AJ Jordan. Available under the GNU Affero GPL.]]></copyright><webMaster><![CDATA[AJ Jordan <alex@strugee.net>]]></webMaster><item><title><![CDATA[Where we're headed (a.k.a. I'm worried)]]></title><description><![CDATA[<p>(These are some thoughts I've had after reading <a href="http://www.nytimes.com/2016/12/14/nyregion/donald-trump-democrats-lawsuits.html?_r=0">To Combat Trump, Democrats Ready a G.O.P. Tactic: Lawsuits</a> in the New York Times.)</p>
<p>I'm worried.</p>
<p>I'm worried about my country.</p>
<p>Believe it or not, I'm not talking about Trump. Of course he's horrible, and he's something to be seriously worried about, but I think he's really only a symptom of a much deeper issue in America, which is this: we are in an arms race with ourselves. (One might also describe it as civil war.)</p>
<p>I mean, think about it. Republicans (I'll get to Democrats in just a sec) have spent the last 8 years creating and perfecting tools to block legislation from going through. Government is about compromise, and they refuse to compromise. They shut down the government for cheap political points[1], continually and covertly passed <em>almost</em>-but-not-quite-unconstitutional antiabortion laws, and topped it all off with a taxpayer-funded lawsuit againt President Obama - just to name a few malicious maneuvers they've used.</p>
<p>Now that Republicans control both Congress <em>and</em> the White House, Democrats are gearing up to use those exact same tactics against Republicans. It's shameful behavior, and it's unbefitting for a democracy. This country is supposed to be about elected officials finding ways to compromise with each other so that everyone's as happy as possible, but instead it's turned into a situation where everyone is laser-focused on pushing through their full political agenda, no matter how unproductive it is and no matter what the cost.</p>
<p>Here's the big problem: I may think it's shameful behavior, but that doesn't mean I don't support the Dems. I completely support it, because the incoming administration's agenda is completely horrific to me. I support the Democrats' intent to utilize lawsuits because I don't think politics is just a game; it's life-or-death. Somewhere out there, there's a kid who's <em>dying</em> because conversion therapy has pushed them to the brink of suicide. It's a glaring human rights abuse, and Mike Pence wants to <em>fund</em> it.</p>
<p>Republicans may have invented the do-nothing Congress, but now they can't put the genie back in the bottle. The Democrats and the Republicans are now <em>stuck</em> in a legal arms race, and neither of them can turn back because then the other side would <em>destroy</em> them. And that makes me very worried, because if we're in an arms race, that begs the question: what's the breaking point? And what happens when we hit it?</p>
<p>I don't have the answer to these questions. I don't know how to stop us from reaching that breaking point. I dunno, maybe if we were all just... more patient? But sadly, that seems extremely unlikely. Sometimes I wonder if there simply isn't anything to be done - if America is the great experiment in democracy, maybe this is just the inevitable failure of that experiment.</p>
<p>All I really know is that we need to do something, and soon. Because if we don't, we will grind ourselves out of existence.</p>
<p>Footnotes:</p>
<p> [1]: we actually know for a fact - from staff present at an early meeting - that none of those orchestrating the shutdown believed it would accomplish anything. They just wanted to score points with their base. This is <em>fact</em>.</p>
]]></description><link>https://strugee.net/blog/2016/12/where-were-headed-aka-im-worried</link><guid isPermaLink="true">https://strugee.net/blog/2016/12/where-were-headed-aka-im-worried</guid><category><![CDATA[musings]]></category><category><![CDATA[politics]]></category><pubDate>Fri, 23 Dec 2016 01:43:35 GMT</pubDate></item><item><title><![CDATA[Friendly reminder: protect yourself while protesting]]></title><description><![CDATA[<p>In light of the recent protests against Donald Trump's nomination, I wanted to write up some tips for people going out and protesting on how to protect themselves from retribution, both physical and legal. These guidelines are especially critical given the almost unfettered power the federal government and (through the federal government) local governments have to surveil citizens exercising their constitutional right to free assembly.</p>
<p>This is not a laughing matter: recall that President-elect Trump has repeatedly <a href="https://www.theguardian.com/us-news/video/2015/nov/23/donald-trump-calls-for-surveillance-of-mosques-video">called for greater surveillance of mosques</a>, indicating that he will have no problem expanding and abusing the power of the federal government's mass surveillance network. In <a href="https://www.theguardian.com/world/2016/nov/11/trump-surveillance-network-nsa-privacy">this Guardian article</a>, Thomas Drake (an NSA whistleblower predating Snowden) says it far better than I could:</p>
<blockquote>
<p>The electronic infrastructure is fully in place – and ex post facto legalised by Congress and executive orders – and ripe for further abuse under an autocratic, power-obsessed president. History is just not kind here. Trump leans quite autocratic. The temptations to use secret NSA surveillance powers, some still not fully revealed, will present themselves to him as sirens.</p>
</blockquote>
<p>So, here are some tips on how to protect yourself while engaging in a political protest:</p>
<h2>General guidelines</h2>
<ul>
<li>Don't talk to police</li>
<li>If possible, leave your phone at home<ul>
<li>If this isn't possible, leave your phone in Airplane Mode or even better, turn it off. <strong>It is not enough to not post anything; you cannot connect to the cell network <em>at all</em>.</strong> See <a href="https://en.wikipedia.org/wiki/IMSI-catcher">IMSI catchers</a>.</li>
<li>Use a passcode on your phone - this gives you a better position under the 5th Amendment for resisting a search of your phone</li>
<li>If police try to force you to give up the passcode of your phone, they are probably breaking the law</li>
<li><strong>Disable fingerprint unlock</strong>, as <a href="http://time.com/3558936/fingerprint-password-fifth-amendment/">police are legally allowed to force you to unlock the phone via your fingerprint</a> (note: this link is insecure; consider visiting it in <a href="https://www.torproject.org/">Tor Browser</a>)</li>
<li><strong>Disable face unlock</strong> (or any other form of <a href="https://en.wikipedia.org/wiki/Biometrics">biometric</a> authentication) since the police may be able to force you to unlock the phone for the same reason they can do this with fingerprint unlock</li>
<li>Make sure full-disk encryption is enabled on your phone<ul>
<li>iPhone users: this is already on if you're using iOS 8 or later</li>
<li>Android users: this is often enabled by default, but you should check by going to Settings &gt; Security and looking under "Encryption"</li>
<li>Windows Phone users: not available. Leave your phone at home.</li>
</ul></li>
</ul></li>
<li>Do not bring laptops or tablets - the 5th Amendment protections above <a href="https://www.cnet.com/news/doj-we-can-force-you-to-decrypt-that-laptop/">do <em>not</em> necessarily apply</a> to these devices, so they can be seized and searched even without a warrant</li>
<li><a href="https://www.youtube.com/watch?v=d-7o9xYp7eE"><strong>Seriously do <em>not</em> talk to the police</strong></a></li>
<li>Use strong encryption for everything you do online</li>
<li><strong>Don't post anything on social media about the protest</strong>, including photos, checkins, and text, either during or after. (Remember: the protest lasts one night, but <a href="https://en.wikipedia.org/wiki/Metadata">metadata</a> lasts forever.)</li>
<li>Under the First Amendment you have the right to film police officers but be <em>extremely</em> careful because some police departments are extremely hostile towards this behavior anyway, to the point of physical violence. See <a href="https://www.aclu.org/know-your-rights/photographers-what-do-if-you-are-stopped-or-detained-taking-photographs">the ACLU's guide</a> for more information.</li>
</ul>
<h2>What do do if you're stopped by the police</h2>
<p>If you're stopped by the police and they start questioning you, be polite but invoke the Fifth Amendment (i.e. say: "I don't want to answer any questions unless my lawyer is present", and keep saying it if the officer presses you). Ask if you're under arrest. If not, great! The police officer cannot legally detain you and you're free to go - do so calmly and silently.</p>
<p>If you <em>are</em> under arrest, here are the things you should do right away:</p>
<ul>
<li><strong>Say: "under what grounds am I under arrest?"</strong> The officer is only allowed to arrest you if they believe you are about to commit or are in the act of committing a crime. (Remember, photographing officers is not a crime; if they say something about this, remind them that it's protected under the First Amendment.)</li>
<li><strong>Immediately ask for a laywer.</strong> If you don't have one, the government <a href="https://en.wikipedia.org/wiki/Sixth_Amendment_to_the_United_States_Constitution#Assistance_of_counsel">is required</a> to provide you with one.</li>
</ul>
<p>Then, keep these tips in mind:</p>
<ul>
<li>Stay calm</li>
<li>Be polite</li>
<li>Don't run</li>
<li>Don't lie</li>
<li>Do not resist, argue, or be rude, <em>even if you are innocent</em></li>
<li>No matter what the officer asks you or tells you, <strong>always say: "I invoke my right to remain silent until I can talk to my lawyer."</strong> Do <em>not</em> answer any questions, no matter how innocuous. Your lawyer will tell you to remain silent but it is important that you make it clear you're requesting a lawyer anyway, because it will look better in case you end up in front of a jury.</li>
<li>If you <em>do</em> answer questions, you're allowed to stop at any time. But still don't do it in the first place.</li>
<li>Under some states, you can be compelled to give your name (but nothing else). <strong>Before you leave your house, look up whether your state has this policy.</strong> These are sometimes called "Stop and Identify" laws.</li>
<li>If possible, write down the details of what's happened.</li>
<li>Do not physically resist the officer, <em>even if they're violating your rights</em>. Instead, write down the violation. Then file a written complain later and/or contact a lawyer or your local ACLU.</li>
<li>Useful things to write down in this case: the officer's name, their badge and patrol car numbers, the agency the officer is from, contact information for witnesses</li>
<li>If you're injured, photograph the injuries</li>
<li>You don't have to consent to searches of your person or your car. If you don't, make it very clear that you don't. The officer may pat down your clothes for a weapon, but anything beyond that requires your consent.</li>
</ul>
<p>The ACLU also provides additional information for <a href="https://www.aclu.org/know-your-rights/what-do-when-encountering-law-enforcement-additional-information-non-citizens">non-citizens</a>, <a href="https://www.aclu.org/know-your-rights/photographers-what-do-if-you-are-stopped-or-detained-taking-photographs">people taking photos or videos</a>, <a href="https://www.aclu.org/know-your-rights/what-do-when-encountering-police-youth">young people</a> (e.g. college students) and <a href="https://www.aclu.org/know-your-rights/deaf-rights-what-do-when-dealing-police">deaf people</a>.</p>
<h2>More resources</h2>
<p>A lot of the above is based on the ACLU's excellent <a href="https://www.aclu.org/know-your-rights/what-do-when-encountering-law-enforcement-questioning?redirect=know-your-rights/when-encountering-law-enforcement-questioning">"Know Your Rights" booklet</a>. The ACLU also has a page specifically devoted to <a href="https://www.aclu.org/know-your-rights/what-do-if-your-rights-are-violated-demonstration-or-protest">rights violations at demonstrations and protests</a>.</p>
<p><a href="https://prism-break.org/">PRISM Break</a> is a good resource for technology that will help you resist mass surveillance. <a href="https://whispersystems.org/">Signal</a> is on that list and is very, very good and extremely easy to use; it's what I recommend. Keep in mind, however, that following recommendations from PRISM Break is not a substitute for leaving your phone at home.</p>
<p>If you have more resources or tips that should be listed here, <a href="https://strugee.net/contact">contact me</a> (or <a href="https://github.com/strugee/strugee.github.com/blob/src/src/blog/friendly-reminder-protect-yourself-while-protesting.md">edit this on GitHub</a>) and I'll be sure to add them.</p>
]]></description><link>https://strugee.net/blog/2016/11/friendly-reminder-protect-yourself-while-protesting</link><guid isPermaLink="true">https://strugee.net/blog/2016/11/friendly-reminder-protect-yourself-while-protesting</guid><category><![CDATA[politics]]></category><category><![CDATA[privacy]]></category><pubDate>Thu, 17 Nov 2016 17:17:11 GMT</pubDate></item><item><title><![CDATA[Pump.io 2.0.4 is available]]></title><description><![CDATA[<p>Greetings!</p>
<p>After a beta period of just over a week, pump.io 2.0.4 is now available on npm and GitHub. Whoohoo!</p>
<p>(This was originally going to be 2.0.0, but we had to do a couple patch releases due to some outdated documentation and several critical bugs. 2.0.4 is mostly the same thing as 2.0.0.)</p>
<h2>Changes</h2>
<p>Note that this release includes security improvements - namely, a newer Express version and a better TLS configuration - and therefore <strong>admins are encouraged to upgrade ASAP</strong>.</p>
<p>For the full list of changes, see <a href="https://github.com/pump-io/pump.io/blob/master/CHANGELOG.md#204---2016-11-13">the change log</a>.</p>
<h3>Breaking changes</h3>
<p>(As I said in [the beta announcement][0]:)</p>
<p>Pump.io 2.0.4 is a drop-in replacement for 1.0.0 <strong>unless</strong> you have any plugins configured or you modify the templates.</p>
<p>Plugins are likely to be affected by the upgrade to Express 3.x. The easiest way to migrate is probably to just run pump.io, test out the relevant parts of the app, and see where your plugin crashes. You might also want to look at the <a href="https://github.com/expressjs/express/blob/master/History.md#300--2012-10-23">Express 3 change log</a>.</p>
<p>If you modified the templates, you'll be affected by the templates' rewrite from utml into Jade. Migration should be relatively painless but has to be done manually. Your best bet will be to save a copy of the diff you created, undo your changes, upgrade, then use the diff you saved to reintroduce your changes. You'll have to run <code>npm run build</code> after making changes to Jade files.</p>
<h3>Non-breaking changes</h3>
<p>This release is actually relatively minor in terms of non-breaking changes; however, we <em>do</em> have some nice new improvements:</p>
<ul>
<li>A pump(1) manpage is now included</li>
<li>Any internal web UI link with a <code>data-bypass</code> attribute is now ignored by the routing logic (useful for e.g. custom pages added by the admin)</li>
<li>YouTube links in posts are now shown as  embeds by the web UI (<a href="https://github.com/expressjs/express/blob/master/History.md#300--2012-10-23">#1158</a>)</li>
<li>TLS connections now use Mozilla's "intermediate" cipher suite and forces server cipher suite preferences (<a href="https://github.com/pump-io/pump.io/issues/1061">#1061</a>)</li>
<li>Various minor fixes and improvements</li>
</ul>
<h2>Upgrading</h2>
<p>Upgrading is dead-simple. If you used our recommended install method, and installed from npm, you can upgrade with:</p>
<pre><code>sudo npm install -g pump.io@2
</code></pre>
<p>If you installed from source, you can upgrade with:</p>
<pre><code>git fetch
# If you modified templates, save the diff at this step
git checkout .
git checkout v2.0.4
npm install
# Restore your template changes
npm run lint:jade # Optional but recommended if you changed templates
npm run build
</code></pre>
<p>Both of these methods will work whether you're running 0.3.0, 1.0.0, or 2.0.0 beta. Make sure to restart pump.io after performing the upgrade.</p>
<h2>Getting help</h2>
<p>If you have any issues with the upgrade, get in touch with <a href="https://github.com/pump-io/pump.io/wiki/Community">the community</a>. You can also email me at <a href="mailto:alex@strugee.net">alex@strugee.net</a>.</p>
]]></description><link>https://strugee.net/blog/2016/11/pump.io-2.0.1-is-available</link><guid isPermaLink="true">https://strugee.net/blog/2016/11/pump.io-2.0.1-is-available</guid><category><![CDATA[development]]></category><category><![CDATA[releases]]></category><category><![CDATA[pump.io]]></category><pubDate>Fri, 11 Nov 2016 23:49:14 GMT</pubDate></item><item><title><![CDATA['Free software' phrasing considered harmful]]></title><description><![CDATA[<p>For a while now I've been avoiding using the term "free software."</p>
<p>Why? It's just plain confusing to people. I know Richard Stallman will tell you that it means freedom, not gratis. <em>It doesn't matter</em>. It's still ambiguous and needlessly conflates two different concepts.</p>
<p>Instead of "free software," I propose "freedom-respecting software" as a replacement. This phrasing is not only unambigous, it also does a much more effective job of communicating the general meaning of the term without further explanation. (Of course you'll probably still need to explain it, but you'll have to spend a lot less time doing so.) The one problem with this phrasing is that it's longer, but even that doesn't hold water - because of the aformentioned problems with "free software," people actually don't say "free software" all that much; instead, they say "free (as in freedom) software" which is unambiguous, but awkward on multiple levels. Not only is it a less eloquent way of describing the concept, but gramatically speaking it's really terrible as it puts a parenthetical qualifier in-between an adjective and a noun, which just sounds <em>terrible</em> and unnatural. Seriously, say both of them out loud. "Freedom-respecting software" and "free (as in freedom) software" - which one sounds like less of a mouthful?</p>
<p>Hence, I think "free software" as a term should be considered harmful, and replaced with "freedom-respecting software" instead.</p>
<p><em>Edit 0:58 10/10/16:</em></p>
<p>Another advantage of "freedom-respecting software" is that it's still closely related to the old term, allowing for a much easier pivot. Consider "libre software" which AFAICT had the same goals as this proposal but never really took off - in part, I think, because it sounds very different from an already-established term. (Another way of putting this is that it's conceptually an improvement to an existing term instead of being something <em>brand-new</em>, and therefore all existing associations will carry over with far more ease.)</p>
<p>I'd also point out that the problem of ambiguity is more serious than I've said above. First of all, generally speaking I'm suspicious of any proposal or argument that begins or ends with "we just need to educate people more." Education is an important part of the freedom-respecting software movement - remember, that movement is by and for the people - but I think that argument is too frequently simply an excuse for a poor initial design. (Security, I'm looking at you.) Second, such an ambiguity also muddles our search results. When people search for "free software" they <em>do</em> get our stuff (a fact that I was pleasantly surprised by!) but they also get loads and loads of pages for gratis Windows crapware. That's unideal and it is unlikely to change, ever. Even if people <em>were</em> able to readily grasp the distinction between freedom and gratis that we're pitching, we will never, ever have enough influence on the language people use to get them to <em>stop</em> using "free" to mean gratis - which means that Google will continue showing gratis crapware as "free software."</p>
<p>Finally, as <a href="https://github.com/nylira/prism-break/issues/1601">pointed out</a> by some excellent PRISM Break contributors, me writing this blog post and then talking about it occasionally is a <em>far</em> dumber idea than directly contacting the FSF, which I now intend to do Real Soon Now™.</p>
]]></description><link>https://strugee.net/blog/2016/11/free-software-phrasing-considered-harmful</link><guid isPermaLink="true">https://strugee.net/blog/2016/11/free-software-phrasing-considered-harmful</guid><category><![CDATA[musings]]></category><pubDate>Wed, 09 Nov 2016 14:18:12 GMT</pubDate></item><item><title><![CDATA[Pump.io 2.0.0 beta is here]]></title><description><![CDATA[<p>Greetings!</p>
<p>As pump.io is gearing up for our 2.0.0 release, I just published a beta to npm. We'd love it if any interested admins could upgrade their nodes and report any bugs you may run in to. (All bug reports are helpful, but just so we're clear, we're likely to only fix regressions from 1.0.0.)</p>
<h2>Changes</h2>
<p>Pump.io 2.0.0 beta is a drop-in replacement for 1.0.0 <strong>unless</strong> you have any plugins configured or you modify the templates.</p>
<p>Plugins are likely to be affected by the upgrade to Express 3.x. The easiest way to migrate is probably to just run pump.io, test out the relevant parts of the app, and see where your plugin crashes. You might also want to look at the <a href="https://github.com/expressjs/express/blob/master/History.md#300--2012-10-23">Express 3 change log</a>.</p>
<p>If you modified the templates, you'll be affected by the templates' rewrite from utml into Jade. Migration should be relatively painless but has to be done manually. Your best bet will be to save a copy of the diff you created, undo your changes, upgrade, then use the diff you saved to reintroduce your changes. You'll have to run <code>npm run build</code> after making changes to Jade files.</p>
<p>For the list of non-breaking changes, see <a href="https://github.com/pump-io/pump.io/blob/master/CHANGELOG.md#200-beta-1---2016-11-02">the change log</a>.</p>
<h2>Upgrading</h2>
<p>Upgrading is very easy. If you used our recommended install method, and installed from npm, you can upgrade to the beta with:</p>
<pre><code>sudo npm install -g pump.io@beta
</code></pre>
<p>If you installed from source, you can upgrade with:</p>
<pre><code>git fetch
# If you modified templates, save the diff at this step
git checkout .
git checkout v2.0.0-beta.1
npm install
# Restore your template changes
npm run lint:jade # Optional but recommended if you changed templates
npm run build
</code></pre>
<p>Make sure to restart pump.io after performing the upgrade.</p>
<h2>Getting help</h2>
<p>If you have any issues upgrading to or running the beta, please don't hesitate to get in touch with <a href="https://github.com/e14n/pump.io/wiki/Community">the community</a>. You can also email me at <a href="mailto:alex@strugee.net">alex@strugee.net</a>.</p>
]]></description><link>https://strugee.net/blog/2016/11/pump.io-2.0.0-beta-is-here</link><guid isPermaLink="true">https://strugee.net/blog/2016/11/pump.io-2.0.0-beta-is-here</guid><category><![CDATA[development]]></category><category><![CDATA[releases]]></category><category><![CDATA[pump.io]]></category><pubDate>Wed, 02 Nov 2016 20:05:59 GMT</pubDate></item><item><title><![CDATA[Webmention test receiver]]></title><description><![CDATA[<p>This post exists only to have a dedicated test URL to send example webmentions to until <a href="https://github.com/aaronpk/webmention.io/issues/77">webmention.io issue 77</a> is fixed (or in other words, I need a URL with a wide variety of webmention data associated with it so I can test the webmention styling you see at the bottom of all individual post pages).</p>
<p>It will be removed eventually, probably.</p>
]]></description><link>https://strugee.net/blog/2016/11/webmention-test</link><guid isPermaLink="true">https://strugee.net/blog/2016/11/webmention-test</guid><category><![CDATA[development]]></category><pubDate>Tue, 01 Nov 2016 23:34:40 GMT</pubDate></item><item><title><![CDATA[GitHub's 'squash and merge' default considered harmful]]></title><description><![CDATA[<p>Recently GitHub launched two new ways to merge Pull Requests: "rebase and merge" and "squash and merge". That means that projects now have three ways to merge PRs:</p>
<ul>
<li>Merge - creates a merge commit merging the branch (even if it's fast-forwardable)</li>
<li>Rebase and merge - rebases on top of the target branch and fast-forwards</li>
<li>Squash and merge - rebases on top of the target branch, squashes all commits into a single commit, and fast-forwards</li>
</ul>
<p>Now, the default is "squash and merge", because apparently that's what people find to be the "prettiest" history. This bothers me for one simple reason: a squash and merge default means a <em>history destruction</em> default[1].</p>
<p>The whole point of commit squashing is to destroy history. Sometimes that's fine - for example, I might squash a typo fix into an earlier commit, because who cares that I typo'd <code>vare</code> instead of <code>var</code>? However, anything less trivial than typo fixes is valuable information about how the project evolved. Even if all of the commits just add stuff, and don't change what's happened earlier in the branch (i.e. even if the direction the implementation's taking doesn't change part-way through) the history contained in the branch is <em>still</em> valuable, because the branch's shortlog will give you a nice overview of exactly what changes happened in the branch. Now, you could of course make the argument that commit squashing shows that same information because by default, in both Git and GitHub, the commit messages being squashed are included in the suggested final commit message. I prefer keeping the individual commits, but that's a valid argument.</p>
<p>However, that doesn't change the fact that in cases where the implementation direction <em>does</em> change part-way through, GitHub's default is actively promoting the irrevocable[2] destruction of valuable history. Lots and lots of people use the GitHub Merge Button, especially those who are new to Git. This default is causing those people to unwittingly destroy valuable information. Sure, it looks nicer in the commit log, and I totally advocate for using squash and merge when it makes sense. But those cases are few and far between - it's basically just a small changes, plus a couple typo fixes or additions. And besides, I think it's far better to have a default of an ugly history rather than a default of an incomplete history. The former may not be the prettiest to look at, but the latter has the potential to actively stop people from doing their jobs[3].</p>
<p>For those curious, here's when I use each mode of the GitHub Merge Button:</p>
<ul>
<li>Merge - when I have a long-running branch that made significant changes and/or diverged significantly from the target branch. In this case, it's valuable to clearly distinguish what's part of the project and what isn't. Rebase and merge is no good because then it's not clear in the history when the branch started and ended. This is particularly evident when looking at <code>git log --graph</code>.</li>
<li>Rebase and merge - what I use most of the time. I use this when there were a couple small commits that were interesting enough to preserve the difference, but the overall change wasn't so huge that it needs to be clearly distinguished in the history. This provides a nice and pretty commit graph.</li>
<li>Squash and merge - I rarely use this. When I do, it's because all of the commits on some branch are <em>so</em> trivial, they really don't matter. Mostly this means that the overall change is tiny, and the only additional commits that are added are small additions to the first.</li>
</ul>
<p>So there you have it. How I use GitHub's Merge Button, and why I think the "squash and merge" default should be considered harmful.</p>
<p>Footnotes:</p>
<p> [1]: I'd like to point out that this is only a problem in Git. Mercurial has (or will have shortly) <a href="https://www.mercurial-scm.org/wiki/ChangesetEvolution">Changeset Evolution</a>, which keeps track of how changesets evolve over time. I.e. when you rewrite history, you're not losing any information.</p>
<p> [2]: I'm sure some of you are about to excitedly tell me about a fantastic tool called the reflog, and I really should read Pro Git because it's a fantastic book and has an entire chapter on data recovery. <em>I know</em>. The reflog is <em>not</em> the right answer for this; not only is it local to (likely) a single developer's machine, but it only stretches back a couple months and only works if the old, dangling commits aren't garbage-collected. By the time someone might be interested in looking at the history that was lost, it's probably far, far too late.</p>
<p> [3]: Another rarely-encountered but very serious problem with both "squash and merge" <em>and</em> "rebase and merge" is when people merge upstream changes in a PR. This is a perfectly legitimate workflow - PRs are great for discussing changes, etc. (although a lot of people think they're the <em>only</em> way to merge things, so they open PRs and then immediately merge them - this, IMHO, is very much <em>not</em> a legitimate workflow) - but if you do anything but merge (which includes both GitHub's "Merge" option and fast-forwarding locally on the CLI), you may have a Very Bad Time the next time you go to merge upstream changes to your fork. Why? Because in Git's view, the changes you merged the first time <em>haven't actually been merged</em>. After all, commit SHAs are nowhere to be found in the tree, since when you rewrote history you changed those IDs! Git has no way of knowing that your rewritten commits and the supposedly "unmerged" commits are basically equivalent. (Mercurial, on the other hand, would've kept track of this information and would have no problem at all.)</p>
]]></description><link>https://strugee.net/blog/2016/10/github-squash-and-merge-default-considered-harmful</link><guid isPermaLink="true">https://strugee.net/blog/2016/10/github-squash-and-merge-default-considered-harmful</guid><category><![CDATA[musings]]></category><pubDate>Wed, 19 Oct 2016 17:40:18 GMT</pubDate></item><item><title><![CDATA[Android freedom]]></title><description><![CDATA[<p>Recently I backed up and restored both my Android phone and my Android tablet. There were a couple reasons for both of these. The tablet had been borked for quite a long time (any time I tried to upgrade it from the Android 5.0 build it was running, it failed - also the thing just froze randomly). The phone was on the CyanogenMod nightly channel and I wanted to switch to the snapshot channel, plus within the past couple days both WiFi and the cell network data connection straight up stopped working so it was pretty unusable. At first I wanted to switch to <a href="https://copperhead.co/android/">CopperheadOS</a> on both devices. CopperheadOS doesn't support GApps and will probably never support GApps (for very good reasons), and I said, maybe I can make it work. Sadly, I couldn't - I still regrettably need stuff from the Google Play Store. (The tablet ended up back on stock because I want fast upgrades, and the phone ended up on CyanogenMod because they have the fastest upgrades while still offering root.)</p>
<p>The whole experience made me think, though - what would it take to create something that functioned like GApps, but respected your freedom? I'm sure some people reading are already scrambling to link me to their favorite Google Play Services reimplementation, but this isn't the only thing that's in GApps. You gotta think about the user experience, too. Such a system should be able to:</p>
<ul>
<li>Provide the nice APIs that Google Play Services does</li>
<li>Store your photos in the cloud, like Google Photos</li>
<li>Related to the above, automatically backup and restore apps and their data</li>
<li>Transfer from other devices, similar to the above item</li>
<li>Support functionality like Google Now</li>
<li>Ditto for Google Assistant</li>
<li>Integrate into the initial device setup to configure all this stuff</li>
</ul>
<p>I'm sure there are more that I've missed.</p>
<p>Honestly, we're actually quite close to this. The first bullet can be mostly accomplished with something like <a href="https://microg.org/">microG</a>. Automatic backup and photo storage needs a UI, but fundamentally can be accomplished with any generic WebDAV implementation. F-Droid can be used as the app store. Imagine this: you take a bunch of photos and install a bunch of freedom-respecting apps on your phone. Then, you get a new one. When you set it up, the phone prompts you to sign in to your WebDAV account (which could be e.g. ownCloud, or a WebDAV implementation on <a href="https://sandstorm.io/">Sandstorm</a>) and then automatically reinstalls all your apps from F-Droid, as well as retrieving their data from ownCloud. When you open the built-in gallery app, all your photos are already there because they're seamlessly backed up to the cloud. <em>Your</em> cloud. Transfer can be accomplished in a lot of ways, but I can easily see it building on the above.</p>
<p>Supporting something like Google Now is non-trivial, but I've even already proposed <a href="https://github.com/cantino/huginn/issues/1583">a feature for Huginn</a> that would make this possible. Google Assistant would be very, very difficult, but even without that, we'd have come a long way.</p>
<p>This reality is not that far off. What's missing is some UI pieces and a nice ZIP that can be flashed on top of ROMs, similar to how GApps are flashed today. So who's going to put it all together?</p>
<p>(I suppose I've just volunteered myself - oh well... I'll just add it to my endless list of projects.)</p>
]]></description><link>https://strugee.net/blog/2016/10/android-freedom</link><guid isPermaLink="true">https://strugee.net/blog/2016/10/android-freedom</guid><category><![CDATA[musings]]></category><pubDate>Mon, 17 Oct 2016 19:40:43 GMT</pubDate></item><item><title><![CDATA[Pump.io 1.0.0 is now available!]]></title><description><![CDATA[<p><a href="https://github.com/e14n/pump.io/releases/tag/v1.0.0">Pump.io 1.0.0</a> is officially available! Whoooo!</p>
<p>I just wanted to write up an announcement real quick to celebrate. Here's a sample what's gone into this release:</p>
<ul>
<li>Node 4.x support</li>
<li>Lots of security improvements including a better cross-site scripting scrubber and security-related headers that help protect the web UI (most notably, the web UI now declares a Content Security Policy)</li>
<li>Minor improvements to the API to make it (slightly) smarter</li>
<li><a href="https://www.gnu.org/software/librejs/">LibreJS</a> support</li>
<li>Numerous dependency upgrades, most notably Connect</li>
<li>And of course, tons of minor bugfixes and improvements</li>
</ul>
<p>For more details, see the brand-new <a href="https://github.com/e14n/pump.io/blob/master/CHANGELOG.md#100---2016-08-26">change log</a>.</p>
<p>And of course since we're now past 0.x.x releases, we're now officially making a commitment to the community to make only API-compatible changes going forward (or at least, until 2.0.0!).</p>
<p>As this release <em>does</em> improve security and fixes a lot of bugs, node administrators are encouraged to upgrade as soon as possible. If you have a global, npm-based install, you can upgrade with:</p>
<pre><code>sudo npm install -g pump.io
</code></pre>
<p>And with a source-based install:</p>
<pre><code>git pull
git checkout v1.0.0
npm install --production
</code></pre>
<p>If you're upgrading from 0.3.0, everything should Just Work(tm). Don't forget to restart your daemon!</p>
<p>One final note - the rumors are true. While we're not doing so <em>yet</em>, we are, in fact, planning to deprecate running under Node.js 0.10 and 0.12 very soon. Also, if you upgrade to Node.js 4.x early, the new, better XSS scrubber will be enabled - <em>however</em>, be aware that pump.io is far less tested under Node.js 4.x and you are likely to run into more bugs than you would under 0.10 or 0.12. This is an unfortunate situation, but sadly there's really nothing to be done about it. :(</p>
<p>Special thanks to Menno Vossen, Laura Arjona, Evan Prodromou, Jan Kusanagi and all the other volunteers who did so many different things to make this release happen. It truly wouldn't have happened without you.</p>
<p>Enjoy the release!</p>
<p>With &lt;3,</p>
<p>AJ</p>
]]></description><link>https://strugee.net/blog/2016/08/pump.io-1.0.0-is-now-available</link><guid isPermaLink="true">https://strugee.net/blog/2016/08/pump.io-1.0.0-is-now-available</guid><category><![CDATA[development]]></category><category><![CDATA[releases]]></category><category><![CDATA[security]]></category><category><![CDATA[pump.io]]></category><pubDate>Fri, 26 Aug 2016 23:37:54 GMT</pubDate></item><item><title><![CDATA[Pump.io: call for testers, call for feedback]]></title><description><![CDATA[<p>So in my <a href="https://strugee.net/blog/2016/08/new-stuff-in-pump.io">last post</a>, I mentioned that I'd left a couple things for a second blog post. This is that post, and instead of being about all the cool stuff going on in the pumpiverse, it's about stuff that you - yes, <em>you</em>! - can do! It's super easy too.</p>
<h2>Call for testers</h2>
<p>So as I mentioned, the <code>utml-to-jade</code> branch is basically finished (see <a href="https://github.com/e14n/pump.io/pull/1170">PR #1170</a>). Since switching templating languages is a huge, huge change, by definition touching every single part of the Web UI, we want to make sure it's well-tested. This is especially critical given the fact that the Web UI unfortunately has <a href="https://github.com/e14n/pump.io/issues/147">very little test coverage</a>.</p>
<p>That's where pump.io system administrators come in. If you're a sysadmin and you're willing to test this change on your node, we'd very much appreciate it. There's very little risk, since I <em>think</em> I've squashed all the regressions that happened, but you should be willing to <a href="https://github.com/e14n/pump.io/issues">report bugs</a> if you <em>do</em> run into them. In particular, you should look out for:</p>
<ol>
<li>Links that seem to encompass too much text</li>
<li>Missing spaces - e.g. <code>Alex Jordanat [date]</code> instead of <code>Alex Jordan at [date]</code></li>
<li>HTML code showing up on the page - e.g. <code>Test note&lt;br /&gt;</code> instead of <code>Test note</code> followed by a line break</li>
</ol>
<p>Note that the <code>utml-to-jade</code> branch incorporates all changes in the <code>master</code> branch, so you may want to check out the advice in <a href="https://github.com/e14n/pump.io/wiki/Running-from-git-master">Running from Git master</a>.</p>
<p>Sound interesting? Want to take part in the development of pump.io? Installing is super easy:</p>
<pre><code>$ [sudo] npm install -g e14n/pump.io#utml-to-jade
</code></pre>
<p>This will work even if you already have a (non-source) install of pump.io - just make sure to restart the server afterwards.</p>
<p>Note that this command has some semi-terrible logic to build Jade templates on install (this is a workaround for a deficiency in npm). If you get a scary warning message from npm, please <a href="https://github.com/e14n/pump.io/issues">file an issue</a>, making sure to include the full log.</p>
<h2>Call for design feedback</h2>
<p>The other big thing that's happening is the pump.io 1.0.0 tshirt we're designing! I've spent quite a bit of time working on a variety of candidate designs which can be viewed in <a href="https://cloud.strugee.net/index.php/s/Ymw2RAdxyFZuuwu">this ownCloud share</a>. Obviously we want the coolest tshirt possible, so we're looking for any design feedback that people have. Anyone with some spare time can glance through the designs, and we'd be thrilled to get everyone's opinions.</p>
<p>If this sounds interesting, I'd welcome you to check out <a href="https://cloud.strugee.net/index.php/s/Ymw2RAdxyFZuuwu">the drafts</a>. As always, get in touch with the community through <a href="https://github.com/e14n/pump.io/wiki/Community#community-accounts-communication">our chatroom</a> or if you'd prefer, you can email me directly at <a href="mailto:alex@strugee.net">alex@strugee.net</a>.</p>
<p>Thanks so much! :)</p>
]]></description><link>https://strugee.net/blog/2016/08/pump.io-call-for-testers-call-for-feedback</link><guid isPermaLink="true">https://strugee.net/blog/2016/08/pump.io-call-for-testers-call-for-feedback</guid><category><![CDATA[development]]></category><category><![CDATA[pump.io]]></category><pubDate>Wed, 10 Aug 2016 13:35:36 GMT</pubDate></item><item><title><![CDATA[New stuff in pump.io]]></title><description><![CDATA[<p>So I promised <a href="https://strugee.net/blog/2016/05/stratic-part-one">a (long) while ago</a> that I'd blog about all the stuff going on in <a href="http://pump.io">pump.io</a>. And there is a <em>lot</em> going on. Where to even begin?</p>
<h2>LFNW talk</h2>
<p>I think the first thing I should mention is <a href="https://linuxfestnorthwest.org/2016/sessions/pumpio-community">the talk</a> I gave at LinuxFest Northwest this year. It went really, really well (even though I finished half the slides the night before), and people seemed to be really engaged, especially during questions. It starts off by covering the history behind pump.io: that includes the relevant protocols, like OStatus and <a href="http://activitystrea.ms">ActivityStreams</a>, but also the motivation behind abandoning StatusNet (aka current GNU Social) in favor of a brand-new network. Next I move on to the way that pump.io itself works, namely, its function as a generic ActivityStreams distribution engine. To put this another way, I explain why this quote from <a href="https://github.com/e14n/pump.io/blob/master/README.md">the README</a>:</p>
<blockquote>
<p>I post something and my followers see it. That's the rough idea behind the pump.</p>
</blockquote>
<p>is a pretty accurate way of describing what pump.io actually does. (I quote that quite a few times in the slides themselves.) I end with a discussion of the recent developments in the community, which are of course wonderful, and a short call-to-action for people to contribute - either directly to the software, or by joining the network and spreading pump.io.</p>
<p>Oh, and by the way - the talk was recorded! So you can watch it <a href="https://www.youtube.com/watch?v=uQ6RVTFdYNc">on YouTube</a> or, even better, <a href="https://media.strugee.net/u/alex/m/linuxfest-northwest-2016-pump-io-the-community/">on my personal MediaGoblin</a>. Fitting, since (as I mention in the talk) MediaGoblin federation will soon be released, and it's based on (and fully interoperable with) the pump.io protocol!</p>
<h2>Conservancy application</h2>
<p>Pump.io is applying to the <a href="https://sfconservancy.org/">Software Freedom Conservancy</a>! This is super fantastic for us for a number of reasons. One of the biggest advantages is the fact that inside Conservancy (assuming our application is accepted), we'll be able to take donations much, much easier. This is primarily important because nodes in the pump.io network are volunteer-run, but they still require funds to operate. We're thinking about models wherein people will be able to donate to "pump.io", and then some (most?) of those funds will be used to pay for the network. (In particular, they'll be used to pay for the existing E14N nodes that Evan currently runs, which will become extremely useful once we transition those nodes to community owners). Conservancy also provides useful miscellaneous services, like owning our logo and making sure that if we encounter license violations, the license is properly enforced. But perhaps most importantly, becoming part of Conservancy cements pump.io even more in the community - both the group of people working on the software &amp; network, but also the larger free software world.</p>
<h2>ReadTheDocs</h2>
<p>We've started a <a href="http://pumpio.readthedocs.io/en/latest/">dedicated space</a> for project documentation, hosted on ReadTheDocs. We're plannning to move a bunch of content from the GitHub wiki into this project, and hopefully it'll become a thorough and central place for pump.io documentation - both for users and for deployers.</p>
<h2>Triage</h2>
<p>We've spent quite a bit of time going through open issues and prioritizing them. A lot of issues have a release target now, and it feels really nice to feel like our issue tracker is a bit more organized.</p>
<p>Special thanks to <a href="https://identi.ca/larjona">Laura Arjona</a> for driving this work.</p>
<h2>Various minor code improvements</h2>
<p>There have been a <em>bunch</em> of small bugfixes and improvements that have gone into the <code>master</code> branch - some of them user-facing, and some of them making the development experience better. Notable changes include:</p>
<ul>
<li>Migrating from Connect 1.x to Connect 2.x (this is just a start - Connect 2.x is still deprecated, but it gets us closer than we were to relying on a fully non-deprecated stack)</li>
<li>JSHint is now automatically run against <code>bin/</code> and <code>routes/</code> when <code>npm test</code> is run. This makes it super obvious when there are regressions in code quality, especially in Pull Requests (since Travis CI will fail if JSHint doesn't succeed.)</li>
<li>JSCS is now used to enforce code style. It's automatically run against the entire codebase (whoo!) when you run <code>npm test</code>, and it's awesome for the same reason - much of the style-related feedback that would've previously ended up in a Pull Request can now be dealt with directly on a local development machine, reducing PR review time for both the reviewer <em>and</em> the contributor.</li>
<li>LibreJS is now <a href="https://github.com/e14n/pump.io/pull/1058">supported</a></li>
<li>Tests now pass! Whooooooooo! (Thanks to Menno Vossen for sending <a href="https://github.com/e14n/pump.io/pull/1136">the enormous Pull Request</a> that made this happen.)</li>
</ul>
<p>Those are just the bigger ones, of course - there are a bunch of even smaller problems that got squashed as well. I'd also like to point out that quite a few of these were long-standing PRs which <em>finally</em> made it into core, which is awesome for everyone.</p>
<h2>Express 3.x migration</h2>
<p>I've been putting in a lot of work to migrate pump.io to Express 3.x. It's a huge amount of work, but when complete, it will bring us very, very close to being able to migrate onto Express 4.x, which is modern and fully-supported by upstream. Basically what I've been doing is just running the app, seeing where it crashes, going to the exception site, and fixing the problem. Rinse, repeat. You can check out this work on the <a href="https://github.com/e14n/pump.io/tree/express-3.x"><code>express-3.x</code></a> branch - currently, this branch can successfully start up the app, but will crash pretty soon after you try to do almost anything else.</p>
<p>This work, unfortunately, is on hold while another important project is completed: converting all the templates from utml to Jade.</p>
<h2>utml to Jade transition</h2>
<p>This is basically what it sounds like. Previously, the templates in pump.io were based on <a href="https://github.com/mikefrey/utml">utml</a>, which is essentially a thin wrapper around <a href="http://underscorejs.org/#template">Underscore.js's <code>_.template()</code></a> function. However, utml doesn't work with Express 3.x (and it's not really worth <em>making</em> it work), plus it's not the prettiest to work with. <a href="http://jade-lang.com/">Jade</a> is an extremely popular templating language in Node-land nowadays, so a couple months ago I spent somewhere between 14 and 18 hours going through and rewriting all the utml in Jade, which was absolutely brutal - but necessary. Then, of course, I had to fix the client-side templating logic to handle Jade instead of Underscore templates, which took quite a while, along with the fact that I made a very large number of minor (largely cosmetic) errors in my conversions.</p>
<p>As I said above, this was kind of awful work (<em>especially</em> the beginning), but it's necessary and great, as it paves the way for Express 3.x <em>and</em> massively improves the contributor experience.</p>
<p>You can check out the gory details of this work in <a href="https://github.com/e14n/pump.io/pull/1170">PR #1170</a>, and the original reasoning behind why we're doing this in <a href="https://github.com/e14n/pump.io/issues/1167">issue #1167</a>. This work is actually done, but I'm going to write a separate blog post about it, calling for testers.</p>
<h2>Upcoming 1.0.0 release</h2>
<p>Last but <strong>certainly</strong> not least, we're gearing up for our 1.0.0 release! From a codebase standpoint, this is really just a small bugfix release (although it will make a lot of things less broken and - if I recall correctly - fix the actual installation process), but more importantly, it means that we're now committing to <a href="http://semver.org/">semantic versioning</a>, which is a win for everyone (but especially administrators). The main thing that needs to be fixed before this goes out the door is the behavior of the XSS scrubber, which was accidentally made a little too aggressive. This is being tracked in <a href="https://github.com/e14n/pump.io/issues/1169">issue #1169</a>.</p>
<p>As a bonus, I'm also designing a t-shirt that (if there's sufficient interest) we may print as a celebration of this release - but more on this in my next post.</p>
]]></description><link>https://strugee.net/blog/2016/08/new-stuff-in-pump.io</link><guid isPermaLink="true">https://strugee.net/blog/2016/08/new-stuff-in-pump.io</guid><category><![CDATA[development]]></category><category><![CDATA[pump.io]]></category><pubDate>Mon, 08 Aug 2016 01:26:32 GMT</pubDate></item><item><title><![CDATA[Work on strugee.net]]></title><description><![CDATA[<p>I realized I forgot to blog about all the work I've done on the <code>strugee.net</code> build code recently! I want to get back to working on Stratic part two (aka pretty indexes), but I thought I'd really quickly take the time to point out what's been done.</p>
<p>First of all, even though I rewrote the code in <a href="http://jade-lang.com">Jade</a> about <a href="https://strugee.net/blog/2014/12/new-blog-new-site">a year and a half ago</a>, there was still a huge amount of boilerplate code in each Jade file. Why? Because essentially the way I did that was by running each HTML file through an <a href="http://html2jade.aaron-powell.com/">HTML to Jade</a> converter, then manually fixing up the result to be, you know, less ugly. That meant that common stuff, like the navbar, footer, includes, etc. were all duplicated across all Jade files. And that sucks, because <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">Don't Repeat Yourself</a> is a thing.</p>
<p>Luckily, refactoring is a thing too! So a few weeks ago, I went and split out the common site layout into <a href="https://github.com/strugee/strugee.github.com/blob/c5ec1634a6b038eec25adb5abcd2b578a60ec4fd/src/includes/layout.jade">its own Jade file</a>, then made all the individual pages inherit from that common layout. The most difficult part of this was undoubtedly the navigation bar - I was pretty sure I'd have to just deal with the fact that the navbar was duplicated across pages (because each page has to have a different link deactivated), but then inspiration struck, and I ended up witht the solution I have now. Instead of treating the entire navigation as one block, I treat each <em>link</em> as a block that is overridable via Jade's <code>block</code> directive. And, since Jade <code>block</code>s can have defaults, each page only overrides exactly what it needs to, and the rest of the links are automatically there and properly clickable.</p>
<p>This has a couple nice side effects. The first is that the codebase that generates <code>strugee.net</code> is now <em>extremely</em> easy for me to change, regardless of what part of the site I touch (whereas before, individual pages were pretty easy but changing e.g. the navbar require editing each and every individual page). The second (and clearly the most important) is that Night Mode, which I implemented in a 45-minute class <em>over two years ago</em> now (back when I was still in high school - what a crazy thing to think about not being in high school anymore!) now works on every page across all of <code>strugee.net</code>. Whooo! Silly hacks are at the core of the web, right? Might as well make them work well.</p>
<p>Finally, I'd be remiss if I didn't mention that I now have a proper <a href="https://github.com/strugee/strugee.github.com/blob/c5ec1634a6b038eec25adb5abcd2b578a60ec4fd/gulpfile.js#L128"><code>deploy</code> task</a>, so I can abandon the sketchy and genuinely terrible deploy process that I used before. (For those curious: <code>gulp build &amp;&amp; git checkout master &amp;&amp; mv dist/*.html . &amp;&amp; git commit -m "Some bad commit message" &amp;&amp; git push &amp;&amp; git checkout src</code> - not shown here are the several attempts where I made some typo or possibly didn't think of some files in <code>dist/</code> that changed and so should have been <code>mv</code>'d, but weren't.) And, I now use root-relative includes now, e.g. <code>/js/main.js</code> instead of <code>js/main.js</code>, which is another win for DRY because now I don't have to maintain different header contents for subpages (which used to be the exact same, just with <code>../</code> prepended to all paths).</p>
<p>In conclusion: yay for progress! And yay for the fact that my codebase actually looks like someone competent wrote it! \o/</p>
<p>(Final note: I haven't forgotten my promise to blog about stuff happening in pump.io-land. But, not now.)</p>
]]></description><link>https://strugee.net/blog/2016/06/work-on-strugee-net</link><guid isPermaLink="true">https://strugee.net/blog/2016/06/work-on-strugee-net</guid><category><![CDATA[development]]></category><pubDate>Mon, 13 Jun 2016 20:30:14 GMT</pubDate></item><item><title><![CDATA[Stratic part one is done!]]></title><description><![CDATA[<p>Whooooooooooo!</p>
<p>I am so, so, <em>so</em> thrilled to announce that the first part of <a href="https://github.com/strugee/generator-stratic">Stratic</a> is complete! And you can see the result right here on strugee.net, since this blog post was generated with Stratic!</p>
<p><strong>tl;dr</strong>:</p>
<pre><code>var rename = require('gulp-rename');
var markdown = require('gulp-markdown');
var parse = require('stratic-parse-header');
var straticToJson = require('stratic-post-to-json-data');
var jadeTemplate = require('gulp-jade-template');
var dateInPath = require('stratic-date-in-path');

gulp.task('posts', function() {
    return gulp.src('src/blog/*.md')
               .pipe(parse())
               .pipe(markdown())
               .pipe(dateInPath())
               .pipe(straticToJson())
               .pipe(jadeTemplate('src/blog/post.jade'))
               .pipe(rename({ extname: '.html' }))
               .pipe(gulp.dest('dist/blog'));
});
</code></pre>
<p>How <em>gorgeous</em> is that?? Let me explain how it works. (I'll assume the reader is familiar with <a href="https://github.com/gulpjs/gulp">Gulp</a> and <a href="https://nodejs.org/en/">Node.js</a>.)</p>
<p>So the <code>gulp.src()</code> call is pretty obvious. We just read all the blog posts into the stream. Note, however, that <code>gulp.src()</code> doesn't stream text, per se - it streams <a href="https://github.com/gulpjs/vinyl">Vinyl</a> file objects. This will become important later.</p>
<p>Now, the first piece of custom Stratic code that we use is the <code>stratic-parse-header</code> module. This module takes a Markdown file with a standard Stratic header (see <a href="https://strugee.net/blog/2014/11/new-blog-new-site">my original announcement</a> for details), parses the header, strips it out, then returns the new, headerless Markdown. However, the new Vinyl file object has a couple of new properties from the parsing phase - specifically, <code>file.title</code>, <code>file.author</code>, <code>file.time</code>, and <code>file.categories</code> now exist. This is why the fact that Vinyl is used is important - now <em>any</em> Gulp plugin downstream from where <code>parse()</code> is run can use all of these values in whatever way it wants. (See <a href="https://github.com/strugee/stratic-parse-header/blob/master/README.md">the README</a> for more details.)</p>
<p>Now our Vinyl file object is <em>only</em> the content of the post, and it has additional Stratic metadata attached to it. Awesome! The next thing that we do is render the Markdown, just using a standard Gulp plugin for this. Easy breezy. After that, we pipe to the <code>stratic-date-in-path</code> module, which adds the year and month to paths. For example, without <code>stratic-date-in-path</code>, this blog post would be at <code>https://strugee.net/blog/stratic-part-one</code>. However, since I <em>do</em> use <code>stratic-date-in-path</code>, the post lives at <code>https://strugee.net/blog/2016/05/stratic-part-one</code> instead. Nice, right? Eventually I'll write code to generate pretty indexes for each year and month - that's what Stratic part 2 is for.</p>
<p>The next thing we do is pipe to the <code>stratic-post-to-json-data</code> module. This module is specifically designed to work with the <code>gulp-jade-template</code> module, which expects the file contents to be some JSON that will be given as data to a <a href="http://jade-lang.com/">Jade</a> template, whose rendered HTML becomes the new file contents. What sets up that JSON? You guessed it - <code>stratic-post-to-json-data</code>. That's all it does. It just creates an object that contains the metadata and the actual post text, runs it through <code>JSON.stringify()</code>, and sets the file contents equal to the result. Just how <code>gulp-jade-template</code> likes it.</p>
<p>And with that, we've successfully rendered a blog post. Whooooooooooo! I'm so pumped about this software. The call to <code>rename()</code> is just a little housekeeping, and then we write the whole thing back to disk with <code>gulp.dest()</code>. Awesome.</p>
<p>It's worth noting that the real beauty in this code isn't what the code actually does, but the extreme modularity of the whole thing. Unlike projects like <a href="https://jekyllrb.com/">Jekyll</a> or even <a href="http://wintersmith.io/">Wintersmith</a>, this isn't a giant, monolithic framework. It's all standard Node and Gulp. Note how (for example) we didn't need a custom plugin for Markdown - we just used the standard <code>gulp-markdown</code>. Don't like Markdown? No problem. Write something to extract post metadata from your preferred format, replace <code>parse()</code> with that and <code>markdown()</code> with a different renderer, and you're golden. All the rest will continue to work the <em>exact</em> same - adding dates to paths, rendering the template, etc. - because everything's decoupled from everything else. Each component can be trivially swapped out and replaced with something new and better, and the rest of the system continues to work. Gorgeous.</p>
<p>I've got to go now, but I'm not done blogging. I'll be back soon to talk about the work going on in <a href="http://pump.io/">pump.io</a>, and I'll be back (much?) later to talk about Stratic part two (aka, pretty indexes).</p>
<p>Whooooooooooooooooooooo!</p>
]]></description><link>https://strugee.net/blog/2016/05/stratic-part-one</link><guid isPermaLink="true">https://strugee.net/blog/2016/05/stratic-part-one</guid><category><![CDATA[development]]></category><category><![CDATA[releases]]></category><category><![CDATA[stratic]]></category><pubDate>Sat, 28 May 2016 14:09:38 GMT</pubDate></item><item><title><![CDATA[Re: Bitcoin, Magical Thinking, and Political Ideology]]></title><description><![CDATA[<p><em>Editorial note: I published this almost three years ago on my Tumblr, which I keep semi-private and so don't want to link to. This is a verbatim repost from there, despite the fact that I disagree with some portions of this text nowadays.</em></p>
<h2><a href="https://al3x.net/2013/12/18/bitcoin.html">Bitcoin, Magical Thinking, and Political Ideology</a></h2>
<p><a href="http://edwardspoonhands.com/post/71550289177/bitcoin-magical-thinking-and-political-ideology">edwardspoonhands</a>:</p>
<blockquote>
<p>I get asked all the time what I think of BitCon…this guy says it better than I could.</p>
</blockquote>
<p>+1 for linking to something by Alex Payne. I love him.</p>
<p>About the actual content, at one point Alex says this:</p>
<blockquote>
<p>We’re told that Bitcoin “fixes serious problems with existing payment systems that depend on centralized services to verify the validity of transactions.” If by “fixes” you mean “ignores”, then yes: a Bitcoin transaction, like cash, comes with the certainty that a definite quantity of a store of value has changed hands, and little else. How this verifies any “validity” or cuts down on fraud I’m not sure; stolen Bitcoins are spent as easily as stolen cash, which is why <a href="http://www.cnbc.com/2013/11/20/more-bitcoins-more-problems-how-hackers-are-targeting-bitcoins.html">theft of Bitcoins has been rampant</a>.</p>
</blockquote>
<p>I think the concern isn’t with fraud or validity. The problem that Bitcoin solves is with the centralized banking model. The fundamental idea behind Bitcoin is that it cannot be centrally controlled or taken down, like the internet. It is impossible to flip a switch and “turn off” the Bitcoin network. It <em>is</em> possible to do that with a centralized bank: in that case, “flipping the switch” ends up being “shut down the bank”. Or, “drive the bank out of business”.</p>
<pre><code>If Bitcoin’s strength comes from decentralization, why pour millions into a single company? Ah, because Coinbase provides an “accessible interface to the Bitcoin protocol”, we’re told. We must centralize to decentralize, you see; such is the perverse logic of capital co-opting power. In order for Bitcoin to grow a thriving ecosystem, it apparently needs a US-based, VC-backed company that has “worked closely with banks and regulators to ensure that the service is safe and compliant”.
</code></pre>
<p>Maybe the problem isn’t with Bitcoin itself, but with what Coinbase is doing with the Bitcoin protocol. Now, to be clear, I think the Bitcoin to USD bridge aspect of Coinbase is OK. But I think that this paragraph is very, very true: it is <em>perverse</em> that we have centralized a decentralized protocol. Decentralized protocols tend to be very dangerous, IMHO, because of the tendency of users to just go with the most popular provider because it’s the easiest solution, and then effectively centralizing the network in the process.</p>
<p>Anyone remember XMPP? XMPP was supposed to be great. It was supposed to be the future of communications on the internet. But in practice, XMPP servers are unreliable. It’s hard to find one that works well. I don’t actually use XMPP a lot myself, but there are a lot of problems with connections, chat requests being undone (so you have to add a contact for a second time), etc. So what happened because of these problems (and the fact that everyone uses Gmail)? The most-used XMPP server is talk.google.com. At least it was, until Google replaced Google Talk with Google Hangouts, which uses a proprietary protocol with no XMPP bridge - and so the network got screwed over, because suddenly, a lot of people upgraded to Hangouts and cut themselves off from the XMPP network. The sad truth, though, is that it almost doesn’t matter. Take a survey of any random Google Talk user. I will bet you $100 that less than 1 out of 50 people who you talk to won’t know that Google Talk is based on XMPP, much less what XMPP is. And there’s almost zero chance that they understand why XMPP matters, or why federated protocols and networks matter.</p>
<p>I’m getting off track, though. So back to Bitcoin and Coinbase. I think what Coinbase is doing by hosting people’s Bitcoin wallets and transactions is fundamentally <em>wrong</em>, because I truly believe that it damages the Bitcoin ecosystem. The centralization in Coinbase is, IMHO, a major problem.</p>
<p>I wonder if this will be solved with a project like <a href="https://arkos.io/">arkOS</a>. I mean, maybe the solutionv that will ultimately happen is for people to spin up their own instances of a Coinbase-like Bitcoin wallet. I think it’s pretty clear that people, in general, like cloud apps better than desktop apps. Access from any computer is a really nice feature to have. Maybe projects like arkOS will help decentralized protocols like Bitcoin remain decentralized in practice.</p>
<p>Or maybe Bitcoin will effectively die, just like XMPP did. I mean, sure, XMPP is still a network. But no one really uses it consciously. Almost everyone who uses XMPP nowadays does so accidentally, through a service that just happens to have an XMPP bridge. Google Talk was a prime example of this, but it’s dead. Now, I’ll bet money that the most-used XMPP provider is Facebook. Never knew that Facebook Chat had an XMPP bridge? That’s because Facebook doesn’t advertise it; the only time it’s mentioned is in the developer docs. The mainstream does not care about the XMPP protocol, because we centralized it. What the mainstream <em>does</em> care about is the services that we centralized it on: Google and Facebook. And that’s a real problem.</p>
]]></description><link>https://strugee.net/blog/2016/05/re-bitcoin</link><guid isPermaLink="true">https://strugee.net/blog/2016/05/re-bitcoin</guid><category><![CDATA[musings]]></category><pubDate>Wed, 11 May 2016 10:18:00 GMT</pubDate></item></channel></rss>